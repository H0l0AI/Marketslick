{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { FirestoreError, Bytes, _isBase64Available, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, clearIndexedDbPersistence, _DatabaseId, _logWarn, connectFirestoreEmulator, enableNetwork, disableNetwork, _validateIsNotUsedTogether, waitForPendingWrites, onSnapshotsInSync, collection, doc, collectionGroup, runTransaction, ensureFirestoreConfigured, WriteBatch as WriteBatch$1, executeWrite, loadBundle, namedQuery, _cast, DocumentReference as DocumentReference$1, DocumentSnapshot as DocumentSnapshot$1, _DocumentKey, refEqual, setDoc, updateDoc, deleteDoc, onSnapshot, getDocFromCache, getDocFromServer, getDoc, snapshotEqual, query, where, orderBy, limit, limitToLast, startAt, startAfter, endBefore, endAt, queryEqual, getDocsFromCache, getDocsFromServer, getDocs, QuerySnapshot as QuerySnapshot$1, addDoc, AbstractUserDataWriter, setLogLevel as setLogLevel$1, QueryDocumentSnapshot as QueryDocumentSnapshot$1, _debugAssert, FieldPath as FieldPath$1, _FieldPath, serverTimestamp, deleteField, arrayUnion, arrayRemove, increment, GeoPoint, Timestamp, CACHE_SIZE_UNLIMITED } from '@firebase/firestore';\nimport { getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\nconst name = \"@firebase/firestore-compat\";\nconst version = \"0.1.14\";\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction validateSetOptions(methodName, options) {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError('invalid-argument', `Invalid options passed to function ${methodName}(): You cannot ` + 'specify both \"merge\" and \"mergeFields\".');\n  }\n\n  return options;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Helper function to assert Uint8Array is available at runtime. */\n\n\nfunction assertUint8ArrayAvailable() {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError('unimplemented', 'Uint8Arrays are not available in this environment.');\n  }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\n\n\nfunction assertBase64Available() {\n  if (!_isBase64Available()) {\n    throw new FirestoreError('unimplemented', 'Blobs are unavailable in Firestore in this environment.');\n  }\n}\n/** Immutable class holding a blob (binary data) */\n\n\nclass Blob {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  static fromBase64String(base64) {\n    assertBase64Available();\n    return new Blob(Bytes.fromBase64String(base64));\n  }\n\n  static fromUint8Array(array) {\n    assertUint8ArrayAvailable();\n    return new Blob(Bytes.fromUint8Array(array));\n  }\n\n  toBase64() {\n    assertBase64Available();\n    return this._delegate.toBase64();\n  }\n\n  toUint8Array() {\n    assertUint8ArrayAvailable();\n    return this._delegate.toUint8Array();\n  }\n\n  isEqual(other) {\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  toString() {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isPartialObserver(obj) {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\n\n\nfunction implementsAnyMethods(obj, methods) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj;\n\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The persistence provider included with the full Firestore SDK.\r\n */\n\n\nclass IndexedDbPersistenceProvider {\n  enableIndexedDbPersistence(firestore, forceOwnership) {\n    return enableIndexedDbPersistence(firestore._delegate, {\n      forceOwnership\n    });\n  }\n\n  enableMultiTabIndexedDbPersistence(firestore) {\n    return enableMultiTabIndexedDbPersistence(firestore._delegate);\n  }\n\n  clearIndexedDbPersistence(firestore) {\n    return clearIndexedDbPersistence(firestore._delegate);\n  }\n\n}\n/**\r\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\r\n * to the functional API of firestore-exp.\r\n */\n\n\nclass Firestore {\n  constructor(databaseIdOrApp, _delegate, _persistenceProvider) {\n    this._delegate = _delegate;\n    this._persistenceProvider = _persistenceProvider;\n    this.INTERNAL = {\n      delete: () => this.terminate()\n    };\n\n    if (!(databaseIdOrApp instanceof _DatabaseId)) {\n      this._appCompat = databaseIdOrApp;\n    }\n  }\n\n  get _databaseId() {\n    return this._delegate._databaseId;\n  }\n\n  settings(settingsLiteral) {\n    const currentSettings = this._delegate._getSettings();\n\n    if (!settingsLiteral.merge && currentSettings.host !== settingsLiteral.host) {\n      _logWarn('You are overriding the original host. If you did not intend ' + 'to override your settings, use {merge: true}.');\n    }\n\n    if (settingsLiteral.merge) {\n      settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral); // Remove the property from the settings once the merge is completed\n\n      delete settingsLiteral.merge;\n    }\n\n    this._delegate._setSettings(settingsLiteral);\n  }\n\n  useEmulator(host, port) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    connectFirestoreEmulator(this._delegate, host, port, options);\n  }\n\n  enableNetwork() {\n    return enableNetwork(this._delegate);\n  }\n\n  disableNetwork() {\n    return disableNetwork(this._delegate);\n  }\n\n  enablePersistence(settings) {\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      synchronizeTabs = !!settings.synchronizeTabs;\n      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n\n      _validateIsNotUsedTogether('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);\n    }\n\n    return synchronizeTabs ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this) : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);\n  }\n\n  clearPersistence() {\n    return this._persistenceProvider.clearIndexedDbPersistence(this);\n  }\n\n  terminate() {\n    if (this._appCompat) {\n      this._appCompat._removeServiceInstance('firestore-compat');\n\n      this._appCompat._removeServiceInstance('firestore');\n    }\n\n    return this._delegate._delete();\n  }\n\n  waitForPendingWrites() {\n    return waitForPendingWrites(this._delegate);\n  }\n\n  onSnapshotsInSync(arg) {\n    return onSnapshotsInSync(this._delegate, arg);\n  }\n\n  get app() {\n    if (!this._appCompat) {\n      throw new FirestoreError('failed-precondition', \"Firestore was not initialized using the Firebase SDK. 'app' is \" + 'not available');\n    }\n\n    return this._appCompat;\n  }\n\n  collection(pathString) {\n    try {\n      return new CollectionReference(this, collection(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\n    }\n  }\n\n  doc(pathString) {\n    try {\n      return new DocumentReference(this, doc(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\n    }\n  }\n\n  collectionGroup(collectionId) {\n    try {\n      return new Query(this, collectionGroup(this._delegate, collectionId));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');\n    }\n  }\n\n  runTransaction(updateFunction) {\n    return runTransaction(this._delegate, transaction => updateFunction(new Transaction(this, transaction)));\n  }\n\n  batch() {\n    ensureFirestoreConfigured(this._delegate);\n    return new WriteBatch(new WriteBatch$1(this._delegate, mutations => executeWrite(this._delegate, mutations)));\n  }\n\n  loadBundle(bundleData) {\n    return loadBundle(this._delegate, bundleData);\n  }\n\n  namedQuery(name) {\n    return namedQuery(this._delegate, name).then(expQuery => {\n      if (!expQuery) {\n        return null;\n      }\n\n      return new Query(this, // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\n      // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\n      expQuery);\n    });\n  }\n\n}\n\nclass UserDataWriter extends AbstractUserDataWriter {\n  constructor(firestore) {\n    super();\n    this.firestore = firestore;\n  }\n\n  convertBytes(bytes) {\n    return new Blob(new Bytes(bytes));\n  }\n\n  convertReference(name) {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return DocumentReference.forKey(key, this.firestore,\n    /* converter= */\n    null);\n  }\n\n}\n\nfunction setLogLevel(level) {\n  setLogLevel$1(level);\n}\n/**\r\n * A reference to a transaction.\r\n */\n\n\nclass Transaction {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(_firestore);\n  }\n\n  get(documentRef) {\n    const ref = castReference(documentRef);\n    return this._delegate.get(ref).then(result => new DocumentSnapshot(this._firestore, new DocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, ref.converter)));\n  }\n\n  set(documentRef, data, options) {\n    const ref = castReference(documentRef);\n\n    if (options) {\n      validateSetOptions('Transaction.set', options);\n\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n\n    return this;\n  }\n\n  update(documentRef, dataOrField, value) {\n    for (var _len = arguments.length, moreFieldsAndValues = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      moreFieldsAndValues[_key - 3] = arguments[_key];\n    }\n\n    const ref = castReference(documentRef);\n\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField);\n    } else {\n      this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\n    }\n\n    return this;\n  }\n\n  delete(documentRef) {\n    const ref = castReference(documentRef);\n\n    this._delegate.delete(ref);\n\n    return this;\n  }\n\n}\n\nclass WriteBatch {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  set(documentRef, data, options) {\n    const ref = castReference(documentRef);\n\n    if (options) {\n      validateSetOptions('WriteBatch.set', options);\n\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n\n    return this;\n  }\n\n  update(documentRef, dataOrField, value) {\n    for (var _len2 = arguments.length, moreFieldsAndValues = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      moreFieldsAndValues[_key2 - 3] = arguments[_key2];\n    }\n\n    const ref = castReference(documentRef);\n\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField);\n    } else {\n      this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\n    }\n\n    return this;\n  }\n\n  delete(documentRef) {\n    const ref = castReference(documentRef);\n\n    this._delegate.delete(ref);\n\n    return this;\n  }\n\n  commit() {\n    return this._delegate.commit();\n  }\n\n}\n/**\r\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\r\n * experimental SDK into corresponding types from the Classic SDK before passing\r\n * them to the wrapped converter.\r\n */\n\n\nclass FirestoreDataConverter {\n  constructor(_firestore, _userDataWriter, _delegate) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._delegate = _delegate;\n  }\n\n  fromFirestore(snapshot, options) {\n    const expSnapshot = new QueryDocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata,\n    /* converter= */\n    null);\n    return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});\n  }\n\n  toFirestore(modelObject, options) {\n    if (!options) {\n      return this._delegate.toFirestore(modelObject);\n    } else {\n      return this._delegate.toFirestore(modelObject, options);\n    }\n  } // Use the same instance of `FirestoreDataConverter` for the given instances\n  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\n  // compare equal for two objects created with the same converter instance.\n\n\n  static getInstance(firestore, converter) {\n    const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\n    let untypedConverterByConverter = converterMapByFirestore.get(firestore);\n\n    if (!untypedConverterByConverter) {\n      untypedConverterByConverter = new WeakMap();\n      converterMapByFirestore.set(firestore, untypedConverterByConverter);\n    }\n\n    let instance = untypedConverterByConverter.get(converter);\n\n    if (!instance) {\n      instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);\n      untypedConverterByConverter.set(converter, instance);\n    }\n\n    return instance;\n  }\n\n}\n\nFirestoreDataConverter.INSTANCES = new WeakMap();\n/**\r\n * A reference to a particular document in a collection in the database.\r\n */\n\nclass DocumentReference {\n  constructor(firestore, _delegate) {\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  static forPath(path, firestore, converter) {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError('invalid-argument', 'Invalid document reference. Document ' + 'references must have an even number of segments, but ' + `${path.canonicalString()} has ${path.length}`);\n    }\n\n    return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, new _DocumentKey(path)));\n  }\n\n  static forKey(key, firestore, converter) {\n    return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, key));\n  }\n\n  get id() {\n    return this._delegate.id;\n  }\n\n  get parent() {\n    return new CollectionReference(this.firestore, this._delegate.parent);\n  }\n\n  get path() {\n    return this._delegate.path;\n  }\n\n  collection(pathString) {\n    try {\n      return new CollectionReference(this.firestore, collection(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');\n    }\n  }\n\n  isEqual(other) {\n    other = getModularInstance(other);\n\n    if (!(other instanceof DocumentReference$1)) {\n      return false;\n    }\n\n    return refEqual(this._delegate, other);\n  }\n\n  set(value, options) {\n    options = validateSetOptions('DocumentReference.set', options);\n\n    try {\n      if (options) {\n        return setDoc(this._delegate, value, options);\n      } else {\n        return setDoc(this._delegate, value);\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\n    }\n  }\n\n  update(fieldOrUpdateData, value) {\n    for (var _len3 = arguments.length, moreFieldsAndValues = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      moreFieldsAndValues[_key3 - 2] = arguments[_key3];\n    }\n\n    try {\n      if (arguments.length === 1) {\n        return updateDoc(this._delegate, fieldOrUpdateData);\n      } else {\n        return updateDoc(this._delegate, fieldOrUpdateData, value, ...moreFieldsAndValues);\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\n    }\n  }\n\n  delete() {\n    return deleteDoc(this._delegate);\n  }\n\n  onSnapshot() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver(args, result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  get(options) {\n    let snap;\n\n    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n      snap = getDocFromCache(this._delegate);\n    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n      snap = getDocFromServer(this._delegate);\n    } else {\n      snap = getDoc(this._delegate);\n    }\n\n    return snap.then(result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\n  }\n\n  withConverter(converter) {\n    return new DocumentReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n\n}\n/**\r\n * Replaces the function name in an error thrown by the firestore-exp API\r\n * with the function names used in the classic API.\r\n */\n\n\nfunction replaceFunctionName(e, original, updated) {\n  e.message = e.message.replace(original, updated);\n  return e;\n}\n/**\r\n * Iterates the list of arguments from an `onSnapshot` call and returns the\r\n * first argument that may be an `SnapshotListenOptions` object. Returns an\r\n * empty object if none is found.\r\n */\n\n\nfunction extractSnapshotOptions(args) {\n  for (const arg of args) {\n    if (typeof arg === 'object' && !isPartialObserver(arg)) {\n      return arg;\n    }\n  }\n\n  return {};\n}\n/**\r\n * Creates an observer that can be passed to the firestore-exp SDK. The\r\n * observer converts all observed values into the format expected by the classic\r\n * SDK.\r\n *\r\n * @param args - The list of arguments from an `onSnapshot` call.\r\n * @param wrapper - The function that converts the firestore-exp type into the\r\n * type used by this shim.\r\n */\n\n\nfunction wrapObserver(args, wrapper) {\n  var _a, _b;\n\n  let userObserver;\n\n  if (isPartialObserver(args[0])) {\n    userObserver = args[0];\n  } else if (isPartialObserver(args[1])) {\n    userObserver = args[1];\n  } else if (typeof args[0] === 'function') {\n    userObserver = {\n      next: args[0],\n      error: args[1],\n      complete: args[2]\n    };\n  } else {\n    userObserver = {\n      next: args[1],\n      error: args[2],\n      complete: args[3]\n    };\n  }\n\n  return {\n    next: val => {\n      if (userObserver.next) {\n        userObserver.next(wrapper(val));\n      }\n    },\n    error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),\n    complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)\n  };\n}\n\nclass DocumentSnapshot {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  get ref() {\n    return new DocumentReference(this._firestore, this._delegate.ref);\n  }\n\n  get id() {\n    return this._delegate.id;\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get exists() {\n    return this._delegate.exists();\n  }\n\n  data(options) {\n    return this._delegate.data(options);\n  }\n\n  get(fieldPath, options // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    return this._delegate.get(fieldPath, options);\n  }\n\n  isEqual(other) {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n\n}\n\nclass QueryDocumentSnapshot extends DocumentSnapshot {\n  data(options) {\n    const data = this._delegate.data(options);\n\n    _debugAssert(data !== undefined, 'Document in a QueryDocumentSnapshot should exist');\n\n    return data;\n  }\n\n}\n\nclass Query {\n  constructor(firestore, _delegate) {\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  where(fieldPath, opStr, value) {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `where` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query(this.firestore, query(this._delegate, where(fieldPath, opStr, value)));\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n\n  orderBy(fieldPath, directionStr) {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query(this.firestore, query(this._delegate, orderBy(fieldPath, directionStr)));\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n\n  limit(n) {\n    try {\n      return new Query(this.firestore, query(this._delegate, limit(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limit()', 'Query.limit()');\n    }\n  }\n\n  limitToLast(n) {\n    try {\n      return new Query(this.firestore, query(this._delegate, limitToLast(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\n    }\n  }\n\n  startAt() {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAt(...arguments)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\n    }\n  }\n\n  startAfter() {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAfter(...arguments)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\n    }\n  }\n\n  endBefore() {\n    try {\n      return new Query(this.firestore, query(this._delegate, endBefore(...arguments)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\n    }\n  }\n\n  endAt() {\n    try {\n      return new Query(this.firestore, query(this._delegate, endAt(...arguments)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\n    }\n  }\n\n  isEqual(other) {\n    return queryEqual(this._delegate, other._delegate);\n  }\n\n  get(options) {\n    let query;\n\n    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n      query = getDocsFromCache(this._delegate);\n    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n      query = getDocsFromServer(this._delegate);\n    } else {\n      query = getDocs(this._delegate);\n    }\n\n    return query.then(result => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, result._snapshot)));\n  }\n\n  onSnapshot() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver(args, snap => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, snap._snapshot)));\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  withConverter(converter) {\n    return new Query(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n\n}\n\nclass DocumentChange {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  get type() {\n    return this._delegate.type;\n  }\n\n  get doc() {\n    return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);\n  }\n\n  get oldIndex() {\n    return this._delegate.oldIndex;\n  }\n\n  get newIndex() {\n    return this._delegate.newIndex;\n  }\n\n}\n\nclass QuerySnapshot {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  get query() {\n    return new Query(this._firestore, this._delegate.query);\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get size() {\n    return this._delegate.size;\n  }\n\n  get empty() {\n    return this._delegate.empty;\n  }\n\n  get docs() {\n    return this._delegate.docs.map(doc => new QueryDocumentSnapshot(this._firestore, doc));\n  }\n\n  docChanges(options) {\n    return this._delegate.docChanges(options).map(docChange => new DocumentChange(this._firestore, docChange));\n  }\n\n  forEach(callback, thisArg) {\n    this._delegate.forEach(snapshot => {\n      callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, snapshot));\n    });\n  }\n\n  isEqual(other) {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n\n}\n\nclass CollectionReference extends Query {\n  constructor(firestore, _delegate) {\n    super(firestore, _delegate);\n    this.firestore = firestore;\n    this._delegate = _delegate;\n  }\n\n  get id() {\n    return this._delegate.id;\n  }\n\n  get path() {\n    return this._delegate.path;\n  }\n\n  get parent() {\n    const docRef = this._delegate.parent;\n    return docRef ? new DocumentReference(this.firestore, docRef) : null;\n  }\n\n  doc(documentPath) {\n    try {\n      if (documentPath === undefined) {\n        // Call `doc` without `documentPath` if `documentPath` is `undefined`\n        // as `doc` validates the number of arguments to prevent users from\n        // accidentally passing `undefined`.\n        return new DocumentReference(this.firestore, doc(this._delegate));\n      } else {\n        return new DocumentReference(this.firestore, doc(this._delegate, documentPath));\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\n    }\n  }\n\n  add(data) {\n    return addDoc(this._delegate, data).then(docRef => new DocumentReference(this.firestore, docRef));\n  }\n\n  isEqual(other) {\n    return refEqual(this._delegate, other._delegate);\n  }\n\n  withConverter(converter) {\n    return new CollectionReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n\n}\n\nfunction castReference(documentRef) {\n  return _cast(documentRef, DocumentReference$1);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a list\r\n * of field names (referring to a nested field in the document).\r\n */\n\n\nclass FieldPath {\n  /**\r\n   * Creates a FieldPath from the provided field names. If more than one field\r\n   * name is provided, the path will point to a nested field in a document.\r\n   *\r\n   * @param fieldNames - A list of field names.\r\n   */\n  constructor() {\n    for (var _len6 = arguments.length, fieldNames = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      fieldNames[_key6] = arguments[_key6];\n    }\n\n    this._delegate = new FieldPath$1(...fieldNames);\n  }\n\n  static documentId() {\n    /**\r\n     * Internal Note: The backend doesn't technically support querying by\r\n     * document ID. Instead it queries by the entire document name (full path\r\n     * included), but in the cases we currently support documentId(), the net\r\n     * effect is the same.\r\n     */\n    return new FieldPath(_FieldPath.keyField().canonicalString());\n  }\n\n  isEqual(other) {\n    other = getModularInstance(other);\n\n    if (!(other instanceof FieldPath$1)) {\n      return false;\n    }\n\n    return this._delegate._internalPath.isEqual(other._internalPath);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass FieldValue {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  static serverTimestamp() {\n    const delegate = serverTimestamp();\n    delegate._methodName = 'FieldValue.serverTimestamp';\n    return new FieldValue(delegate);\n  }\n\n  static delete() {\n    const delegate = deleteField();\n    delegate._methodName = 'FieldValue.delete';\n    return new FieldValue(delegate);\n  }\n\n  static arrayUnion() {\n    const delegate = arrayUnion(...arguments);\n    delegate._methodName = 'FieldValue.arrayUnion';\n    return new FieldValue(delegate);\n  }\n\n  static arrayRemove() {\n    const delegate = arrayRemove(...arguments);\n    delegate._methodName = 'FieldValue.arrayRemove';\n    return new FieldValue(delegate);\n  }\n\n  static increment(n) {\n    const delegate = increment(n);\n    delegate._methodName = 'FieldValue.increment';\n    return new FieldValue(delegate);\n  }\n\n  isEqual(other) {\n    return this._delegate.isEqual(other._delegate);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n/**\r\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\r\n *\r\n * @param firebase - The FirebaseNamespace to register Firestore with\r\n * @param firestoreFactory - A factory function that returns a new Firestore\r\n *    instance.\r\n */\n\nfunction configureForFirebase(firebase, firestoreFactory) {\n  firebase.INTERNAL.registerComponent(new Component('firestore-compat', container => {\n    const app = container.getProvider('app-compat').getImmediate();\n    const firestoreExp = container.getProvider('firestore').getImmediate();\n    return firestoreFactory(app, firestoreExp);\n  }, 'PUBLIC').setServiceProps(Object.assign({}, firestoreNamespace)));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Registers the main Firestore build with the components framework.\r\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\r\n */\n\n\nfunction registerFirestore(instance) {\n  configureForFirebase(instance, (app, firestoreExp) => new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider()));\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\nexport { registerFirestore };","map":{"version":3,"sources":["/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@firebase/firestore-compat/dist/index.esm2017.js"],"names":["firebase","FirestoreError","Bytes","_isBase64Available","enableIndexedDbPersistence","enableMultiTabIndexedDbPersistence","clearIndexedDbPersistence","_DatabaseId","_logWarn","connectFirestoreEmulator","enableNetwork","disableNetwork","_validateIsNotUsedTogether","waitForPendingWrites","onSnapshotsInSync","collection","doc","collectionGroup","runTransaction","ensureFirestoreConfigured","WriteBatch","WriteBatch$1","executeWrite","loadBundle","namedQuery","_cast","DocumentReference","DocumentReference$1","DocumentSnapshot","DocumentSnapshot$1","_DocumentKey","refEqual","setDoc","updateDoc","deleteDoc","onSnapshot","getDocFromCache","getDocFromServer","getDoc","snapshotEqual","query","where","orderBy","limit","limitToLast","startAt","startAfter","endBefore","endAt","queryEqual","getDocsFromCache","getDocsFromServer","getDocs","QuerySnapshot","QuerySnapshot$1","addDoc","AbstractUserDataWriter","setLogLevel","setLogLevel$1","QueryDocumentSnapshot","QueryDocumentSnapshot$1","_debugAssert","FieldPath","FieldPath$1","_FieldPath","serverTimestamp","deleteField","arrayUnion","arrayRemove","increment","GeoPoint","Timestamp","CACHE_SIZE_UNLIMITED","getModularInstance","Component","name","version","validateSetOptions","methodName","options","undefined","merge","mergeFields","assertUint8ArrayAvailable","Uint8Array","assertBase64Available","Blob","constructor","_delegate","fromBase64String","base64","fromUint8Array","array","toBase64","toUint8Array","isEqual","other","toString","isPartialObserver","obj","implementsAnyMethods","methods","object","method","IndexedDbPersistenceProvider","firestore","forceOwnership","Firestore","databaseIdOrApp","_persistenceProvider","INTERNAL","delete","terminate","_appCompat","_databaseId","settings","settingsLiteral","currentSettings","_getSettings","host","Object","assign","_setSettings","useEmulator","port","enablePersistence","synchronizeTabs","experimentalForceOwningTab","clearPersistence","_removeServiceInstance","_delete","arg","app","pathString","CollectionReference","e","replaceFunctionName","collectionId","Query","updateFunction","transaction","Transaction","batch","mutations","bundleData","then","expQuery","UserDataWriter","convertBytes","bytes","convertReference","key","convertDocumentKey","forKey","level","_firestore","_userDataWriter","get","documentRef","ref","castReference","result","_key","_document","metadata","converter","set","data","update","dataOrField","value","moreFieldsAndValues","arguments","length","commit","FirestoreDataConverter","fromFirestore","snapshot","expSnapshot","toFirestore","modelObject","getInstance","converterMapByFirestore","INSTANCES","untypedConverterByConverter","WeakMap","instance","forPath","path","canonicalString","id","parent","fieldOrUpdateData","args","extractSnapshotOptions","observer","wrapObserver","snap","source","withConverter","original","updated","message","replace","wrapper","_a","_b","userObserver","next","error","complete","val","bind","exists","fieldPath","opStr","directionStr","n","_snapshot","DocumentChange","type","oldIndex","newIndex","size","empty","docs","map","docChanges","docChange","forEach","callback","thisArg","call","docRef","documentPath","add","fieldNames","documentId","keyField","_internalPath","FieldValue","delegate","_methodName","firestoreNamespace","configureForFirebase","firestoreFactory","registerComponent","container","getProvider","getImmediate","firestoreExp","setServiceProps","registerFirestore","registerVersion"],"mappings":"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","sourcesContent":["import firebase from '@firebase/app-compat';\nimport { FirestoreError, Bytes, _isBase64Available, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, clearIndexedDbPersistence, _DatabaseId, _logWarn, connectFirestoreEmulator, enableNetwork, disableNetwork, _validateIsNotUsedTogether, waitForPendingWrites, onSnapshotsInSync, collection, doc, collectionGroup, runTransaction, ensureFirestoreConfigured, WriteBatch as WriteBatch$1, executeWrite, loadBundle, namedQuery, _cast, DocumentReference as DocumentReference$1, DocumentSnapshot as DocumentSnapshot$1, _DocumentKey, refEqual, setDoc, updateDoc, deleteDoc, onSnapshot, getDocFromCache, getDocFromServer, getDoc, snapshotEqual, query, where, orderBy, limit, limitToLast, startAt, startAfter, endBefore, endAt, queryEqual, getDocsFromCache, getDocsFromServer, getDocs, QuerySnapshot as QuerySnapshot$1, addDoc, AbstractUserDataWriter, setLogLevel as setLogLevel$1, QueryDocumentSnapshot as QueryDocumentSnapshot$1, _debugAssert, FieldPath as FieldPath$1, _FieldPath, serverTimestamp, deleteField, arrayUnion, arrayRemove, increment, GeoPoint, Timestamp, CACHE_SIZE_UNLIMITED } from '@firebase/firestore';\nimport { getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\nconst name = \"@firebase/firestore-compat\";\nconst version = \"0.1.14\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateSetOptions(methodName, options) {\r\n    if (options === undefined) {\r\n        return {\r\n            merge: false\r\n        };\r\n    }\r\n    if (options.mergeFields !== undefined && options.merge !== undefined) {\r\n        throw new FirestoreError('invalid-argument', `Invalid options passed to function ${methodName}(): You cannot ` +\r\n            'specify both \"merge\" and \"mergeFields\".');\r\n    }\r\n    return options;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Helper function to assert Uint8Array is available at runtime. */\r\nfunction assertUint8ArrayAvailable() {\r\n    if (typeof Uint8Array === 'undefined') {\r\n        throw new FirestoreError('unimplemented', 'Uint8Arrays are not available in this environment.');\r\n    }\r\n}\r\n/** Helper function to assert Base64 functions are available at runtime. */\r\nfunction assertBase64Available() {\r\n    if (!_isBase64Available()) {\r\n        throw new FirestoreError('unimplemented', 'Blobs are unavailable in Firestore in this environment.');\r\n    }\r\n}\r\n/** Immutable class holding a blob (binary data) */\r\nclass Blob {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    static fromBase64String(base64) {\r\n        assertBase64Available();\r\n        return new Blob(Bytes.fromBase64String(base64));\r\n    }\r\n    static fromUint8Array(array) {\r\n        assertUint8ArrayAvailable();\r\n        return new Blob(Bytes.fromUint8Array(array));\r\n    }\r\n    toBase64() {\r\n        assertBase64Available();\r\n        return this._delegate.toBase64();\r\n    }\r\n    toUint8Array() {\r\n        assertUint8ArrayAvailable();\r\n        return this._delegate.toUint8Array();\r\n    }\r\n    isEqual(other) {\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n    toString() {\r\n        return 'Blob(base64: ' + this.toBase64() + ')';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isPartialObserver(obj) {\r\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\r\n}\r\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    const object = obj;\r\n    for (const method of methods) {\r\n        if (method in object && typeof object[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The persistence provider included with the full Firestore SDK.\r\n */\r\nclass IndexedDbPersistenceProvider {\r\n    enableIndexedDbPersistence(firestore, forceOwnership) {\r\n        return enableIndexedDbPersistence(firestore._delegate, { forceOwnership });\r\n    }\r\n    enableMultiTabIndexedDbPersistence(firestore) {\r\n        return enableMultiTabIndexedDbPersistence(firestore._delegate);\r\n    }\r\n    clearIndexedDbPersistence(firestore) {\r\n        return clearIndexedDbPersistence(firestore._delegate);\r\n    }\r\n}\r\n/**\r\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\r\n * to the functional API of firestore-exp.\r\n */\r\nclass Firestore {\r\n    constructor(databaseIdOrApp, _delegate, _persistenceProvider) {\r\n        this._delegate = _delegate;\r\n        this._persistenceProvider = _persistenceProvider;\r\n        this.INTERNAL = {\r\n            delete: () => this.terminate()\r\n        };\r\n        if (!(databaseIdOrApp instanceof _DatabaseId)) {\r\n            this._appCompat = databaseIdOrApp;\r\n        }\r\n    }\r\n    get _databaseId() {\r\n        return this._delegate._databaseId;\r\n    }\r\n    settings(settingsLiteral) {\r\n        const currentSettings = this._delegate._getSettings();\r\n        if (!settingsLiteral.merge &&\r\n            currentSettings.host !== settingsLiteral.host) {\r\n            _logWarn('You are overriding the original host. If you did not intend ' +\r\n                'to override your settings, use {merge: true}.');\r\n        }\r\n        if (settingsLiteral.merge) {\r\n            settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral);\r\n            // Remove the property from the settings once the merge is completed\r\n            delete settingsLiteral.merge;\r\n        }\r\n        this._delegate._setSettings(settingsLiteral);\r\n    }\r\n    useEmulator(host, port, options = {}) {\r\n        connectFirestoreEmulator(this._delegate, host, port, options);\r\n    }\r\n    enableNetwork() {\r\n        return enableNetwork(this._delegate);\r\n    }\r\n    disableNetwork() {\r\n        return disableNetwork(this._delegate);\r\n    }\r\n    enablePersistence(settings) {\r\n        let synchronizeTabs = false;\r\n        let experimentalForceOwningTab = false;\r\n        if (settings) {\r\n            synchronizeTabs = !!settings.synchronizeTabs;\r\n            experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\r\n            _validateIsNotUsedTogether('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);\r\n        }\r\n        return synchronizeTabs\r\n            ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this)\r\n            : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);\r\n    }\r\n    clearPersistence() {\r\n        return this._persistenceProvider.clearIndexedDbPersistence(this);\r\n    }\r\n    terminate() {\r\n        if (this._appCompat) {\r\n            this._appCompat._removeServiceInstance('firestore-compat');\r\n            this._appCompat._removeServiceInstance('firestore');\r\n        }\r\n        return this._delegate._delete();\r\n    }\r\n    waitForPendingWrites() {\r\n        return waitForPendingWrites(this._delegate);\r\n    }\r\n    onSnapshotsInSync(arg) {\r\n        return onSnapshotsInSync(this._delegate, arg);\r\n    }\r\n    get app() {\r\n        if (!this._appCompat) {\r\n            throw new FirestoreError('failed-precondition', \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\r\n                'not available');\r\n        }\r\n        return this._appCompat;\r\n    }\r\n    collection(pathString) {\r\n        try {\r\n            return new CollectionReference(this, collection(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\r\n        }\r\n    }\r\n    doc(pathString) {\r\n        try {\r\n            return new DocumentReference(this, doc(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\r\n        }\r\n    }\r\n    collectionGroup(collectionId) {\r\n        try {\r\n            return new Query(this, collectionGroup(this._delegate, collectionId));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');\r\n        }\r\n    }\r\n    runTransaction(updateFunction) {\r\n        return runTransaction(this._delegate, transaction => updateFunction(new Transaction(this, transaction)));\r\n    }\r\n    batch() {\r\n        ensureFirestoreConfigured(this._delegate);\r\n        return new WriteBatch(new WriteBatch$1(this._delegate, mutations => executeWrite(this._delegate, mutations)));\r\n    }\r\n    loadBundle(bundleData) {\r\n        return loadBundle(this._delegate, bundleData);\r\n    }\r\n    namedQuery(name) {\r\n        return namedQuery(this._delegate, name).then(expQuery => {\r\n            if (!expQuery) {\r\n                return null;\r\n            }\r\n            return new Query(this, \r\n            // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\r\n            // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\r\n            expQuery);\r\n        });\r\n    }\r\n}\r\nclass UserDataWriter extends AbstractUserDataWriter {\r\n    constructor(firestore) {\r\n        super();\r\n        this.firestore = firestore;\r\n    }\r\n    convertBytes(bytes) {\r\n        return new Blob(new Bytes(bytes));\r\n    }\r\n    convertReference(name) {\r\n        const key = this.convertDocumentKey(name, this.firestore._databaseId);\r\n        return DocumentReference.forKey(key, this.firestore, /* converter= */ null);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    setLogLevel$1(level);\r\n}\r\n/**\r\n * A reference to a transaction.\r\n */\r\nclass Transaction {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(_firestore);\r\n    }\r\n    get(documentRef) {\r\n        const ref = castReference(documentRef);\r\n        return this._delegate\r\n            .get(ref)\r\n            .then(result => new DocumentSnapshot(this._firestore, new DocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, ref.converter)));\r\n    }\r\n    set(documentRef, data, options) {\r\n        const ref = castReference(documentRef);\r\n        if (options) {\r\n            validateSetOptions('Transaction.set', options);\r\n            this._delegate.set(ref, data, options);\r\n        }\r\n        else {\r\n            this._delegate.set(ref, data);\r\n        }\r\n        return this;\r\n    }\r\n    update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\r\n        const ref = castReference(documentRef);\r\n        if (arguments.length === 2) {\r\n            this._delegate.update(ref, dataOrField);\r\n        }\r\n        else {\r\n            this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\r\n        }\r\n        return this;\r\n    }\r\n    delete(documentRef) {\r\n        const ref = castReference(documentRef);\r\n        this._delegate.delete(ref);\r\n        return this;\r\n    }\r\n}\r\nclass WriteBatch {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    set(documentRef, data, options) {\r\n        const ref = castReference(documentRef);\r\n        if (options) {\r\n            validateSetOptions('WriteBatch.set', options);\r\n            this._delegate.set(ref, data, options);\r\n        }\r\n        else {\r\n            this._delegate.set(ref, data);\r\n        }\r\n        return this;\r\n    }\r\n    update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\r\n        const ref = castReference(documentRef);\r\n        if (arguments.length === 2) {\r\n            this._delegate.update(ref, dataOrField);\r\n        }\r\n        else {\r\n            this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\r\n        }\r\n        return this;\r\n    }\r\n    delete(documentRef) {\r\n        const ref = castReference(documentRef);\r\n        this._delegate.delete(ref);\r\n        return this;\r\n    }\r\n    commit() {\r\n        return this._delegate.commit();\r\n    }\r\n}\r\n/**\r\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\r\n * experimental SDK into corresponding types from the Classic SDK before passing\r\n * them to the wrapped converter.\r\n */\r\nclass FirestoreDataConverter {\r\n    constructor(_firestore, _userDataWriter, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._userDataWriter = _userDataWriter;\r\n        this._delegate = _delegate;\r\n    }\r\n    fromFirestore(snapshot, options) {\r\n        const expSnapshot = new QueryDocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata, \r\n        /* converter= */ null);\r\n        return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});\r\n    }\r\n    toFirestore(modelObject, options) {\r\n        if (!options) {\r\n            return this._delegate.toFirestore(modelObject);\r\n        }\r\n        else {\r\n            return this._delegate.toFirestore(modelObject, options);\r\n        }\r\n    }\r\n    // Use the same instance of `FirestoreDataConverter` for the given instances\r\n    // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\r\n    // compare equal for two objects created with the same converter instance.\r\n    static getInstance(firestore, converter) {\r\n        const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\r\n        let untypedConverterByConverter = converterMapByFirestore.get(firestore);\r\n        if (!untypedConverterByConverter) {\r\n            untypedConverterByConverter = new WeakMap();\r\n            converterMapByFirestore.set(firestore, untypedConverterByConverter);\r\n        }\r\n        let instance = untypedConverterByConverter.get(converter);\r\n        if (!instance) {\r\n            instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);\r\n            untypedConverterByConverter.set(converter, instance);\r\n        }\r\n        return instance;\r\n    }\r\n}\r\nFirestoreDataConverter.INSTANCES = new WeakMap();\r\n/**\r\n * A reference to a particular document in a collection in the database.\r\n */\r\nclass DocumentReference {\r\n    constructor(firestore, _delegate) {\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(firestore);\r\n    }\r\n    static forPath(path, firestore, converter) {\r\n        if (path.length % 2 !== 0) {\r\n            throw new FirestoreError('invalid-argument', 'Invalid document reference. Document ' +\r\n                'references must have an even number of segments, but ' +\r\n                `${path.canonicalString()} has ${path.length}`);\r\n        }\r\n        return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, new _DocumentKey(path)));\r\n    }\r\n    static forKey(key, firestore, converter) {\r\n        return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, key));\r\n    }\r\n    get id() {\r\n        return this._delegate.id;\r\n    }\r\n    get parent() {\r\n        return new CollectionReference(this.firestore, this._delegate.parent);\r\n    }\r\n    get path() {\r\n        return this._delegate.path;\r\n    }\r\n    collection(pathString) {\r\n        try {\r\n            return new CollectionReference(this.firestore, collection(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');\r\n        }\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof DocumentReference$1)) {\r\n            return false;\r\n        }\r\n        return refEqual(this._delegate, other);\r\n    }\r\n    set(value, options) {\r\n        options = validateSetOptions('DocumentReference.set', options);\r\n        try {\r\n            if (options) {\r\n                return setDoc(this._delegate, value, options);\r\n            }\r\n            else {\r\n                return setDoc(this._delegate, value);\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\r\n        }\r\n    }\r\n    update(fieldOrUpdateData, value, ...moreFieldsAndValues) {\r\n        try {\r\n            if (arguments.length === 1) {\r\n                return updateDoc(this._delegate, fieldOrUpdateData);\r\n            }\r\n            else {\r\n                return updateDoc(this._delegate, fieldOrUpdateData, value, ...moreFieldsAndValues);\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\r\n        }\r\n    }\r\n    delete() {\r\n        return deleteDoc(this._delegate);\r\n    }\r\n    onSnapshot(...args) {\r\n        const options = extractSnapshotOptions(args);\r\n        const observer = wrapObserver(args, result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\r\n        return onSnapshot(this._delegate, options, observer);\r\n    }\r\n    get(options) {\r\n        let snap;\r\n        if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\r\n            snap = getDocFromCache(this._delegate);\r\n        }\r\n        else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\r\n            snap = getDocFromServer(this._delegate);\r\n        }\r\n        else {\r\n            snap = getDoc(this._delegate);\r\n        }\r\n        return snap.then(result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\r\n    }\r\n    withConverter(converter) {\r\n        return new DocumentReference(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    }\r\n}\r\n/**\r\n * Replaces the function name in an error thrown by the firestore-exp API\r\n * with the function names used in the classic API.\r\n */\r\nfunction replaceFunctionName(e, original, updated) {\r\n    e.message = e.message.replace(original, updated);\r\n    return e;\r\n}\r\n/**\r\n * Iterates the list of arguments from an `onSnapshot` call and returns the\r\n * first argument that may be an `SnapshotListenOptions` object. Returns an\r\n * empty object if none is found.\r\n */\r\nfunction extractSnapshotOptions(args) {\r\n    for (const arg of args) {\r\n        if (typeof arg === 'object' && !isPartialObserver(arg)) {\r\n            return arg;\r\n        }\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Creates an observer that can be passed to the firestore-exp SDK. The\r\n * observer converts all observed values into the format expected by the classic\r\n * SDK.\r\n *\r\n * @param args - The list of arguments from an `onSnapshot` call.\r\n * @param wrapper - The function that converts the firestore-exp type into the\r\n * type used by this shim.\r\n */\r\nfunction wrapObserver(args, wrapper) {\r\n    var _a, _b;\r\n    let userObserver;\r\n    if (isPartialObserver(args[0])) {\r\n        userObserver = args[0];\r\n    }\r\n    else if (isPartialObserver(args[1])) {\r\n        userObserver = args[1];\r\n    }\r\n    else if (typeof args[0] === 'function') {\r\n        userObserver = {\r\n            next: args[0],\r\n            error: args[1],\r\n            complete: args[2]\r\n        };\r\n    }\r\n    else {\r\n        userObserver = {\r\n            next: args[1],\r\n            error: args[2],\r\n            complete: args[3]\r\n        };\r\n    }\r\n    return {\r\n        next: val => {\r\n            if (userObserver.next) {\r\n                userObserver.next(wrapper(val));\r\n            }\r\n        },\r\n        error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),\r\n        complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)\r\n    };\r\n}\r\nclass DocumentSnapshot {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get ref() {\r\n        return new DocumentReference(this._firestore, this._delegate.ref);\r\n    }\r\n    get id() {\r\n        return this._delegate.id;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get exists() {\r\n        return this._delegate.exists();\r\n    }\r\n    data(options) {\r\n        return this._delegate.data(options);\r\n    }\r\n    get(fieldPath, options\r\n    // We are using `any` here to avoid an explicit cast by our users.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ) {\r\n        return this._delegate.get(fieldPath, options);\r\n    }\r\n    isEqual(other) {\r\n        return snapshotEqual(this._delegate, other._delegate);\r\n    }\r\n}\r\nclass QueryDocumentSnapshot extends DocumentSnapshot {\r\n    data(options) {\r\n        const data = this._delegate.data(options);\r\n        _debugAssert(data !== undefined, 'Document in a QueryDocumentSnapshot should exist');\r\n        return data;\r\n    }\r\n}\r\nclass Query {\r\n    constructor(firestore, _delegate) {\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(firestore);\r\n    }\r\n    where(fieldPath, opStr, value) {\r\n        try {\r\n            // The \"as string\" cast is a little bit of a hack. `where` accepts the\r\n            // FieldPath Compat type as input, but is not typed as such in order to\r\n            // not expose this via our public typings file.\r\n            return new Query(this.firestore, query(this._delegate, where(fieldPath, opStr, value)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\r\n        }\r\n    }\r\n    orderBy(fieldPath, directionStr) {\r\n        try {\r\n            // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\r\n            // FieldPath Compat type as input, but is not typed as such in order to\r\n            // not expose this via our public typings file.\r\n            return new Query(this.firestore, query(this._delegate, orderBy(fieldPath, directionStr)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\r\n        }\r\n    }\r\n    limit(n) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, limit(n)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'limit()', 'Query.limit()');\r\n        }\r\n    }\r\n    limitToLast(n) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, limitToLast(n)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\r\n        }\r\n    }\r\n    startAt(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, startAt(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\r\n        }\r\n    }\r\n    startAfter(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, startAfter(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\r\n        }\r\n    }\r\n    endBefore(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, endBefore(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\r\n        }\r\n    }\r\n    endAt(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, endAt(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\r\n        }\r\n    }\r\n    isEqual(other) {\r\n        return queryEqual(this._delegate, other._delegate);\r\n    }\r\n    get(options) {\r\n        let query;\r\n        if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\r\n            query = getDocsFromCache(this._delegate);\r\n        }\r\n        else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\r\n            query = getDocsFromServer(this._delegate);\r\n        }\r\n        else {\r\n            query = getDocs(this._delegate);\r\n        }\r\n        return query.then(result => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, result._snapshot)));\r\n    }\r\n    onSnapshot(...args) {\r\n        const options = extractSnapshotOptions(args);\r\n        const observer = wrapObserver(args, snap => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, snap._snapshot)));\r\n        return onSnapshot(this._delegate, options, observer);\r\n    }\r\n    withConverter(converter) {\r\n        return new Query(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    }\r\n}\r\nclass DocumentChange {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get type() {\r\n        return this._delegate.type;\r\n    }\r\n    get doc() {\r\n        return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);\r\n    }\r\n    get oldIndex() {\r\n        return this._delegate.oldIndex;\r\n    }\r\n    get newIndex() {\r\n        return this._delegate.newIndex;\r\n    }\r\n}\r\nclass QuerySnapshot {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get query() {\r\n        return new Query(this._firestore, this._delegate.query);\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get size() {\r\n        return this._delegate.size;\r\n    }\r\n    get empty() {\r\n        return this._delegate.empty;\r\n    }\r\n    get docs() {\r\n        return this._delegate.docs.map(doc => new QueryDocumentSnapshot(this._firestore, doc));\r\n    }\r\n    docChanges(options) {\r\n        return this._delegate\r\n            .docChanges(options)\r\n            .map(docChange => new DocumentChange(this._firestore, docChange));\r\n    }\r\n    forEach(callback, thisArg) {\r\n        this._delegate.forEach(snapshot => {\r\n            callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, snapshot));\r\n        });\r\n    }\r\n    isEqual(other) {\r\n        return snapshotEqual(this._delegate, other._delegate);\r\n    }\r\n}\r\nclass CollectionReference extends Query {\r\n    constructor(firestore, _delegate) {\r\n        super(firestore, _delegate);\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get id() {\r\n        return this._delegate.id;\r\n    }\r\n    get path() {\r\n        return this._delegate.path;\r\n    }\r\n    get parent() {\r\n        const docRef = this._delegate.parent;\r\n        return docRef ? new DocumentReference(this.firestore, docRef) : null;\r\n    }\r\n    doc(documentPath) {\r\n        try {\r\n            if (documentPath === undefined) {\r\n                // Call `doc` without `documentPath` if `documentPath` is `undefined`\r\n                // as `doc` validates the number of arguments to prevent users from\r\n                // accidentally passing `undefined`.\r\n                return new DocumentReference(this.firestore, doc(this._delegate));\r\n            }\r\n            else {\r\n                return new DocumentReference(this.firestore, doc(this._delegate, documentPath));\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\r\n        }\r\n    }\r\n    add(data) {\r\n        return addDoc(this._delegate, data).then(docRef => new DocumentReference(this.firestore, docRef));\r\n    }\r\n    isEqual(other) {\r\n        return refEqual(this._delegate, other._delegate);\r\n    }\r\n    withConverter(converter) {\r\n        return new CollectionReference(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    }\r\n}\r\nfunction castReference(documentRef) {\r\n    return _cast(documentRef, DocumentReference$1);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// The objects that are a part of this API are exposed to third-parties as\r\n// compiled javascript so we want to flag our private members with a leading\r\n// underscore to discourage their use.\r\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a list\r\n * of field names (referring to a nested field in the document).\r\n */\r\nclass FieldPath {\r\n    /**\r\n     * Creates a FieldPath from the provided field names. If more than one field\r\n     * name is provided, the path will point to a nested field in a document.\r\n     *\r\n     * @param fieldNames - A list of field names.\r\n     */\r\n    constructor(...fieldNames) {\r\n        this._delegate = new FieldPath$1(...fieldNames);\r\n    }\r\n    static documentId() {\r\n        /**\r\n         * Internal Note: The backend doesn't technically support querying by\r\n         * document ID. Instead it queries by the entire document name (full path\r\n         * included), but in the cases we currently support documentId(), the net\r\n         * effect is the same.\r\n         */\r\n        return new FieldPath(_FieldPath.keyField().canonicalString());\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof FieldPath$1)) {\r\n            return false;\r\n        }\r\n        return this._delegate._internalPath.isEqual(other._internalPath);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FieldValue {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    static serverTimestamp() {\r\n        const delegate = serverTimestamp();\r\n        delegate._methodName = 'FieldValue.serverTimestamp';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static delete() {\r\n        const delegate = deleteField();\r\n        delegate._methodName = 'FieldValue.delete';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static arrayUnion(...elements) {\r\n        const delegate = arrayUnion(...elements);\r\n        delegate._methodName = 'FieldValue.arrayUnion';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static arrayRemove(...elements) {\r\n        const delegate = arrayRemove(...elements);\r\n        delegate._methodName = 'FieldValue.arrayRemove';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static increment(n) {\r\n        const delegate = increment(n);\r\n        delegate._methodName = 'FieldValue.increment';\r\n        return new FieldValue(delegate);\r\n    }\r\n    isEqual(other) {\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst firestoreNamespace = {\r\n    Firestore,\r\n    GeoPoint,\r\n    Timestamp,\r\n    Blob,\r\n    Transaction,\r\n    WriteBatch,\r\n    DocumentReference,\r\n    DocumentSnapshot,\r\n    Query,\r\n    QueryDocumentSnapshot,\r\n    QuerySnapshot,\r\n    CollectionReference,\r\n    FieldPath,\r\n    FieldValue,\r\n    setLogLevel,\r\n    CACHE_SIZE_UNLIMITED\r\n};\r\n/**\r\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\r\n *\r\n * @param firebase - The FirebaseNamespace to register Firestore with\r\n * @param firestoreFactory - A factory function that returns a new Firestore\r\n *    instance.\r\n */\r\nfunction configureForFirebase(firebase, firestoreFactory) {\r\n    firebase.INTERNAL.registerComponent(new Component('firestore-compat', container => {\r\n        const app = container.getProvider('app-compat').getImmediate();\r\n        const firestoreExp = container.getProvider('firestore').getImmediate();\r\n        return firestoreFactory(app, firestoreExp);\r\n    }, 'PUBLIC').setServiceProps(Object.assign({}, firestoreNamespace)));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Registers the main Firestore build with the components framework.\r\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\r\n */\r\nfunction registerFirestore(instance) {\r\n    configureForFirebase(instance, (app, firestoreExp) => new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider()));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterFirestore(firebase);\n\nexport { registerFirestore };\n//# sourceMappingURL=index.esm2017.js.map\n"]},"metadata":{},"sourceType":"module"}