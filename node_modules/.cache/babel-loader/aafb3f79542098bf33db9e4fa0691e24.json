{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { httpsCallable, connectFunctionsEmulator } from '@firebase/functions';\nimport { FirebaseError } from '@firebase/util';\nimport { Component } from '@firebase/component';\nconst name = \"@firebase/functions-compat\";\nconst version = \"0.1.9\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass FunctionsService {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n    this._region = this._delegate.region;\n    this._customDomain = this._delegate.customDomain;\n  }\n\n  httpsCallable(name, options) {\n    return httpsCallable(this._delegate, name, options);\n  }\n  /**\r\n   * Deprecated in pre-modularized repo, does not exist in modularized\r\n   * functions package, need to convert to \"host\" and \"port\" args that\r\n   * `useFunctionsEmulatorExp` takes.\r\n   * @deprecated\r\n   */\n\n\n  useFunctionsEmulator(origin) {\n    const match = origin.match('[a-zA-Z]+://([a-zA-Z0-9.-]+)(?::([0-9]+))?');\n\n    if (match == null) {\n      throw new FirebaseError('functions', 'No origin provided to useFunctionsEmulator()');\n    }\n\n    if (match[2] == null) {\n      throw new FirebaseError('functions', 'Port missing in origin provided to useFunctionsEmulator()');\n    }\n\n    return connectFunctionsEmulator(this._delegate, match[1], Number(match[2]));\n  }\n\n  useEmulator(host, port) {\n    return connectFunctionsEmulator(this._delegate, host, port);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_REGION = 'us-central1';\n\nconst factory = (container, _ref) => {\n  let {\n    instanceIdentifier: regionOrCustomDomain\n  } = _ref;\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const functionsServiceExp = container.getProvider('functions').getImmediate({\n    identifier: regionOrCustomDomain !== null && regionOrCustomDomain !== void 0 ? regionOrCustomDomain : DEFAULT_REGION\n  });\n  return new FunctionsService(app, functionsServiceExp);\n};\n\nfunction registerFunctions() {\n  const namespaceExports = {\n    Functions: FunctionsService\n  };\n  firebase.INTERNAL.registerComponent(new Component('functions-compat', factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nregisterFunctions();\nfirebase.registerVersion(name, version);","map":{"version":3,"sources":["/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@firebase/functions-compat/dist/index.esm2017.js"],"names":["firebase","httpsCallable","connectFunctionsEmulator","FirebaseError","Component","name","version","FunctionsService","constructor","app","_delegate","_region","region","_customDomain","customDomain","options","useFunctionsEmulator","origin","match","Number","useEmulator","host","port","DEFAULT_REGION","factory","container","instanceIdentifier","regionOrCustomDomain","getProvider","getImmediate","functionsServiceExp","identifier","registerFunctions","namespaceExports","Functions","INTERNAL","registerComponent","setServiceProps","setMultipleInstances","registerVersion"],"mappings":"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","sourcesContent":["import firebase from '@firebase/app-compat';\nimport { httpsCallable, connectFunctionsEmulator } from '@firebase/functions';\nimport { FirebaseError } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\nconst name = \"@firebase/functions-compat\";\nconst version = \"0.1.9\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FunctionsService {\r\n    constructor(app, _delegate) {\r\n        this.app = app;\r\n        this._delegate = _delegate;\r\n        this._region = this._delegate.region;\r\n        this._customDomain = this._delegate.customDomain;\r\n    }\r\n    httpsCallable(name, options) {\r\n        return httpsCallable(this._delegate, name, options);\r\n    }\r\n    /**\r\n     * Deprecated in pre-modularized repo, does not exist in modularized\r\n     * functions package, need to convert to \"host\" and \"port\" args that\r\n     * `useFunctionsEmulatorExp` takes.\r\n     * @deprecated\r\n     */\r\n    useFunctionsEmulator(origin) {\r\n        const match = origin.match('[a-zA-Z]+://([a-zA-Z0-9.-]+)(?::([0-9]+))?');\r\n        if (match == null) {\r\n            throw new FirebaseError('functions', 'No origin provided to useFunctionsEmulator()');\r\n        }\r\n        if (match[2] == null) {\r\n            throw new FirebaseError('functions', 'Port missing in origin provided to useFunctionsEmulator()');\r\n        }\r\n        return connectFunctionsEmulator(this._delegate, match[1], Number(match[2]));\r\n    }\r\n    useEmulator(host, port) {\r\n        return connectFunctionsEmulator(this._delegate, host, port);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_REGION = 'us-central1';\r\nconst factory = (container, { instanceIdentifier: regionOrCustomDomain }) => {\r\n    // Dependencies\r\n    const app = container.getProvider('app-compat').getImmediate();\r\n    const functionsServiceExp = container.getProvider('functions').getImmediate({\r\n        identifier: regionOrCustomDomain !== null && regionOrCustomDomain !== void 0 ? regionOrCustomDomain : DEFAULT_REGION\r\n    });\r\n    return new FunctionsService(app, functionsServiceExp);\r\n};\r\nfunction registerFunctions() {\r\n    const namespaceExports = {\r\n        Functions: FunctionsService\r\n    };\r\n    firebase.INTERNAL.registerComponent(new Component('functions-compat', factory, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(namespaceExports)\r\n        .setMultipleInstances(true));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterFunctions();\r\nfirebase.registerVersion(name, version);\n//# sourceMappingURL=index.esm2017.js.map\n"]},"metadata":{},"sourceType":"module"}