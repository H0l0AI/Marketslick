{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { Provider, ComponentContainer, Component } from '@firebase/component';\nimport { _validatePathString, onChildMoved, onChildChanged, onChildRemoved, onChildAdded, onValue, off, get, query, limitToFirst, limitToLast, orderByChild, orderByKey, orderByPriority, orderByValue, startAt, startAfter, endAt, endBefore, equalTo, _ReferenceImpl, _QueryImpl, _QueryParams, child, set, _validateWritablePath, update, setWithPriority, remove, runTransaction, setPriority, push, OnDisconnect as OnDisconnect$1, connectDatabaseEmulator, refFromURL, ref, goOffline, goOnline, serverTimestamp, increment, _setSDKVersion, _repoManagerDatabaseFromApp, enableLogging } from '@firebase/database';\nimport { errorPrefix, validateArgCount, validateCallback, validateContextObject, Deferred } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\nconst name = \"@firebase/database-compat\";\nconst version = \"0.1.5\";\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst logClient = new Logger('@firebase/database-compat');\n\nconst warn = function (msg) {\n  const message = 'FIREBASE WARNING: ' + msg;\n  logClient.warn(message);\n};\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst validateBoolean = function (fnName, argumentName, bool, optional) {\n  if (optional && bool === undefined) {\n    return;\n  }\n\n  if (typeof bool !== 'boolean') {\n    throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\n  }\n};\n\nconst validateEventType = function (fnName, eventType, optional) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n\n    default:\n      throw new Error(errorPrefix(fnName, 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass OnDisconnect {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  cancel(onComplete) {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n\n    const result = this._delegate.cancel();\n\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    return result;\n  }\n\n  remove(onComplete) {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n\n    const result = this._delegate.remove();\n\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    return result;\n  }\n\n  set(value, onComplete) {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n\n    const result = this._delegate.set(value);\n\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    return result;\n  }\n\n  setWithPriority(value, priority, onComplete) {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\n\n    const result = this._delegate.setWithPriority(value, priority);\n\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    return result;\n  }\n\n  update(objectToMerge, onComplete) {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge = {};\n\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n\n    const result = this._delegate.update(objectToMerge);\n\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    return result;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass TransactionResult {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   */\n  constructor(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  toJSON() {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\n\n\nclass DataSnapshot {\n  constructor(_database, _delegate) {\n    this._database = _database;\n    this._delegate = _delegate;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  val() {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  }\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  exportVal() {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  toJSON() {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @returns Whether the snapshot contains a non-null value, or is empty.\r\n   */\n\n\n  exists() {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  }\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns DataSnapshot for child node.\r\n   */\n\n\n  child(path) {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length); // Ensure the childPath is a string (can be a number)\n\n    path = String(path);\n\n    _validatePathString('DataSnapshot.child', 'path', path, false);\n\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  }\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns Whether the child exists.\r\n   */\n\n\n  hasChild(path) {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n\n    _validatePathString('DataSnapshot.hasChild', 'path', path, false);\n\n    return this._delegate.hasChild(path);\n  }\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @returns The priority.\r\n   */\n\n\n  getPriority() {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  }\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each child.\r\n   * @returns True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n\n\n  forEach(action) {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));\n  }\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n\n\n  hasChildren() {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  }\n\n  get key() {\n    return this._delegate.key;\n  }\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @returns The number of children that this DataSnapshot contains.\r\n   */\n\n\n  numChildren() {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  }\n  /**\r\n   * @returns The Firebase reference for the location this snapshot's data came\r\n   * from.\r\n   */\n\n\n  getRef() {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n\n}\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\n\n\nclass Query {\n  constructor(database, _delegate) {\n    this.database = database;\n    this._delegate = _delegate;\n  }\n\n  on(eventType, callback, cancelCallbackOrContext, context) {\n    var _a;\n\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n    const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n\n    const valueCallback = (expSnapshot, previousChildName) => {\n      callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);\n    };\n\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n\n      default:\n        throw new Error(errorPrefix('Query.on', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n  }\n\n  off(eventType, callback, context) {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n\n    if (callback) {\n      const valueCallback = () => {};\n\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType, valueCallback);\n    } else {\n      off(this._delegate, eventType);\n    }\n  }\n  /**\r\n   * Get the server-value for this query, or return a cached value if not connected.\r\n   */\n\n\n  get() {\n    return get(this._delegate).then(expSnapshot => {\n      return new DataSnapshot(this.database, expSnapshot);\n    });\n  }\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   */\n\n\n  once(eventType, callback, failureCallbackOrContext, context) {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n    const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\n    const deferred = new Deferred();\n\n    const valueCallback = (expSnapshot, previousChildName) => {\n      const result = new DataSnapshot(this.database, expSnapshot);\n\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n\n      deferred.resolve(result);\n    };\n\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n\n    const cancelCallback = error => {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n\n      deferred.reject(error);\n    };\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n\n      default:\n        throw new Error(errorPrefix('Query.once', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n\n    return deferred.promise;\n  }\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   */\n\n\n  limitToFirst(limit) {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  }\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   */\n\n\n  limitToLast(limit) {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  }\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   */\n\n\n  orderByChild(path) {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  }\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   */\n\n\n  orderByKey() {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  }\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   */\n\n\n  orderByPriority() {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  }\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   */\n\n\n  orderByValue() {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  }\n\n  startAt() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let name = arguments.length > 1 ? arguments[1] : undefined;\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAt(value, name)));\n  }\n\n  startAfter() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let name = arguments.length > 1 ? arguments[1] : undefined;\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAfter(value, name)));\n  }\n\n  endAt() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let name = arguments.length > 1 ? arguments[1] : undefined;\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  }\n\n  endBefore() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let name = arguments.length > 1 ? arguments[1] : undefined;\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endBefore(value, name)));\n  }\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   */\n\n\n  equalTo(value, name) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, equalTo(value, name)));\n  }\n  /**\r\n   * @returns URL for this location.\r\n   */\n\n\n  toString() {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n\n\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   */\n\n\n  isEqual(other) {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n\n    if (!(other instanceof Query)) {\n      const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    return this._delegate.isEqual(other._delegate);\n  }\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param fnName - The function name (on or once)\r\n   *\r\n   */\n\n\n  static getCancelAndContextArgs_(fnName, cancelOrContext, context) {\n    const ret = {\n      cancel: undefined,\n      context: undefined\n    };\n\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(errorPrefix(fnName, 'cancelOrContext') + ' must either be a cancel callback or a context object.');\n      }\n    }\n\n    return ret;\n  }\n\n  get ref() {\n    return new Reference(this.database, new _ReferenceImpl(this._delegate._repo, this._delegate._path));\n  }\n\n}\n\nclass Reference extends Query {\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   */\n  constructor(database, _delegate) {\n    super(database, new _QueryImpl(_delegate._repo, _delegate._path, new _QueryParams(), false));\n    this.database = database;\n    this._delegate = _delegate;\n  }\n  /** @returns {?string} */\n\n\n  getKey() {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  }\n\n  child(pathString) {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n\n    return new Reference(this.database, child(this._delegate, pathString));\n  }\n  /** @returns {?Reference} */\n\n\n  getParent() {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    const parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  }\n  /** @returns {!Reference} */\n\n\n  getRoot() {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  }\n\n  set(newVal, onComplete) {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    const result = set(this._delegate, newVal);\n\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    return result;\n  }\n\n  update(values, onComplete) {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n\n    if (Array.isArray(values)) {\n      const newObjectToMerge = {};\n\n      for (let i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n\n      values = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n\n    _validateWritablePath('Reference.update', this._delegate._path);\n\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n    const result = update(this._delegate, values);\n\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    return result;\n  }\n\n  setWithPriority(newVal, newPriority, onComplete) {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\n    const result = setWithPriority(this._delegate, newVal, newPriority);\n\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    return result;\n  }\n\n  remove(onComplete) {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n    const result = remove(this._delegate);\n\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    return result;\n  }\n\n  transaction(transactionUpdate, onComplete, applyLocally) {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\n    const result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally\n    }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));\n\n    if (onComplete) {\n      result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));\n    }\n\n    return result;\n  }\n\n  setPriority(priority, onComplete) {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n    const result = setPriority(this._delegate, priority);\n\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    return result;\n  }\n\n  push(value, onComplete) {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n    const expPromise = push(this._delegate, value);\n    const promise = expPromise.then(expRef => new Reference(this.database, expRef));\n\n    if (onComplete) {\n      promise.then(() => onComplete(null), error => onComplete(error));\n    }\n\n    const result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  }\n\n  onDisconnect() {\n    _validateWritablePath('Reference.onDisconnect', this._delegate._path);\n\n    return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\n  }\n\n  get key() {\n    return this.getKey();\n  }\n\n  get parent() {\n    return this.getParent();\n  }\n\n  get root() {\n    return this.getRoot();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase database.\r\n */\n\n\nclass Database {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   */\n  constructor(_delegate, app) {\n    this._delegate = _delegate;\n    this.app = app;\n    this.INTERNAL = {\n      delete: () => this._delegate._delete()\n    };\n  }\n  /**\r\n   * Modify this instance to communicate with the Realtime Database emulator.\r\n   *\r\n   * <p>Note: This method must be called before performing any other operation.\r\n   *\r\n   * @param host - the emulator host (ex: localhost)\r\n   * @param port - the emulator port (ex: 8080)\r\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n   */\n\n\n  useEmulator(host, port) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  }\n\n  ref(path) {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      const childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      const childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  }\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @returns Firebase reference.\r\n   */\n\n\n  refFromURL(url) {\n    const apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  } // Make individual repo go offline.\n\n\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  }\n\n}\n\nDatabase.ServerValue = {\n  TIMESTAMP: serverTimestamp(),\n  increment: delta => increment(delta)\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\n\nfunction initStandalone(_ref) {\n  let {\n    app,\n    url,\n    version,\n    customAuthImpl,\n    namespace,\n    nodeAdmin = false\n  } = _ref;\n\n  _setSDKVersion(version);\n  /**\r\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n   * any actual function.\r\n   */\n\n\n  const authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));\n  authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n  return {\n    instance: new Database(_repoManagerDatabaseFromApp(app, authProvider,\n    /* appCheckProvider= */\n    undefined, url, nodeAdmin), app),\n    namespace\n  };\n}\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  initStandalone: initStandalone\n});\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ServerValue = Database.ServerValue;\n\nfunction registerDatabase(instance) {\n  // Register the Database Service with the 'firebase' namespace.\n  instance.INTERNAL.registerComponent(new Component('database-compat', (container, _ref2) => {\n    let {\n      instanceIdentifier: url\n    } = _ref2;\n\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app-compat').getImmediate();\n    const databaseExp = container.getProvider('database').getImmediate({\n      identifier: url\n    });\n    return new Database(databaseExp, app);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps( // firebase.database namespace properties\n  {\n    Reference,\n    Query,\n    Database,\n    DataSnapshot,\n    enableLogging,\n    INTERNAL,\n    ServerValue\n  }).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterDatabase(firebase);\nexport { registerDatabase };","map":{"version":3,"sources":["/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@firebase/database-compat/dist/index.esm2017.js"],"names":["firebase","Provider","ComponentContainer","Component","_validatePathString","onChildMoved","onChildChanged","onChildRemoved","onChildAdded","onValue","off","get","query","limitToFirst","limitToLast","orderByChild","orderByKey","orderByPriority","orderByValue","startAt","startAfter","endAt","endBefore","equalTo","_ReferenceImpl","_QueryImpl","_QueryParams","child","set","_validateWritablePath","update","setWithPriority","remove","runTransaction","setPriority","push","OnDisconnect","OnDisconnect$1","connectDatabaseEmulator","refFromURL","ref","goOffline","goOnline","serverTimestamp","increment","_setSDKVersion","_repoManagerDatabaseFromApp","enableLogging","errorPrefix","validateArgCount","validateCallback","validateContextObject","Deferred","Logger","name","version","logClient","warn","msg","message","validateBoolean","fnName","argumentName","bool","optional","undefined","Error","validateEventType","eventType","constructor","_delegate","cancel","onComplete","arguments","length","result","then","error","value","priority","objectToMerge","Array","isArray","newObjectToMerge","i","TransactionResult","committed","snapshot","toJSON","DataSnapshot","_database","val","exportVal","exists","path","String","hasChild","getPriority","forEach","action","expDataSnapshot","hasChildren","key","numChildren","size","getRef","Reference","Query","database","on","callback","cancelCallbackOrContext","context","_a","ret","getCancelAndContextArgs_","valueCallback","expSnapshot","previousChildName","call","userCallback","cancelCallback","bind","once","failureCallbackOrContext","deferred","resolve","reject","onlyOnce","promise","limit","toString","isEqual","other","cancelOrContext","_repo","_path","getKey","pathString","getParent","parent","getRoot","root","newVal","values","newPriority","transaction","transactionUpdate","applyLocally","transactionResult","expPromise","expRef","catch","onDisconnect","Database","app","INTERNAL","delete","_delete","useEmulator","host","port","options","childRef","url","apiName","ServerValue","TIMESTAMP","delta","initStandalone","customAuthImpl","namespace","nodeAdmin","authProvider","setComponent","instance","Object","freeze","__proto__","registerDatabase","registerComponent","container","instanceIdentifier","getProvider","getImmediate","databaseExp","identifier","setServiceProps","setMultipleInstances","registerVersion"],"mappings":"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","sourcesContent":["import firebase from '@firebase/app-compat';\nimport { Provider, ComponentContainer, Component } from '@firebase/component';\nimport { _validatePathString, onChildMoved, onChildChanged, onChildRemoved, onChildAdded, onValue, off, get, query, limitToFirst, limitToLast, orderByChild, orderByKey, orderByPriority, orderByValue, startAt, startAfter, endAt, endBefore, equalTo, _ReferenceImpl, _QueryImpl, _QueryParams, child, set, _validateWritablePath, update, setWithPriority, remove, runTransaction, setPriority, push, OnDisconnect as OnDisconnect$1, connectDatabaseEmulator, refFromURL, ref, goOffline, goOnline, serverTimestamp, increment, _setSDKVersion, _repoManagerDatabaseFromApp, enableLogging } from '@firebase/database';\nimport { errorPrefix, validateArgCount, validateCallback, validateContextObject, Deferred } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\nconst name = \"@firebase/database-compat\";\nconst version = \"0.1.5\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database-compat');\r\nconst warn = function (msg) {\r\n    const message = 'FIREBASE WARNING: ' + msg;\r\n    logClient.warn(message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst validateBoolean = function (fnName, argumentName, bool, optional) {\r\n    if (optional && bool === undefined) {\r\n        return;\r\n    }\r\n    if (typeof bool !== 'boolean') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\r\n    }\r\n};\r\nconst validateEventType = function (fnName, eventType, optional) {\r\n    if (optional && eventType === undefined) {\r\n        return;\r\n    }\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(errorPrefix(fnName, 'eventType') +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass OnDisconnect {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    cancel(onComplete) {\r\n        validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\r\n        const result = this._delegate.cancel();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\r\n        const result = this._delegate.remove();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    set(value, onComplete) {\r\n        validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\r\n        const result = this._delegate.set(value);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(value, priority, onComplete) {\r\n        validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = this._delegate.setWithPriority(value, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(objectToMerge, onComplete) {\r\n        validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        if (Array.isArray(objectToMerge)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\r\n        const result = this._delegate.update(objectToMerge);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass TransactionResult {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     */\r\n    constructor(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nclass DataSnapshot {\r\n    constructor(_database, _delegate) {\r\n        this._database = _database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    val() {\r\n        validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this._delegate.val();\r\n    }\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    exportVal() {\r\n        validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this._delegate.exportVal();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @returns Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    exists() {\r\n        validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return this._delegate.exists();\r\n    }\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns DataSnapshot for child node.\r\n     */\r\n    child(path) {\r\n        validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        path = String(path);\r\n        _validatePathString('DataSnapshot.child', 'path', path, false);\r\n        return new DataSnapshot(this._database, this._delegate.child(path));\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns Whether the child exists.\r\n     */\r\n    hasChild(path) {\r\n        validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        _validatePathString('DataSnapshot.hasChild', 'path', path, false);\r\n        return this._delegate.hasChild(path);\r\n    }\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @returns The priority.\r\n     */\r\n    getPriority() {\r\n        validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        return this._delegate.priority;\r\n    }\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each child.\r\n     * @returns True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    forEach(action) {\r\n        validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        validateCallback('DataSnapshot.forEach', 'action', action, false);\r\n        return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));\r\n    }\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    hasChildren() {\r\n        validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        return this._delegate.hasChildren();\r\n    }\r\n    get key() {\r\n        return this._delegate.key;\r\n    }\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @returns The number of children that this DataSnapshot contains.\r\n     */\r\n    numChildren() {\r\n        validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this._delegate.size;\r\n    }\r\n    /**\r\n     * @returns The Firebase reference for the location this snapshot's data came\r\n     * from.\r\n     */\r\n    getRef() {\r\n        validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return new Reference(this._database, this._delegate.ref);\r\n    }\r\n    get ref() {\r\n        return this.getRef();\r\n    }\r\n}\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nclass Query {\r\n    constructor(database, _delegate) {\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    on(eventType, callback, cancelCallbackOrContext, context) {\r\n        var _a;\r\n        validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateCallback('Query.on', 'callback', callback, false);\r\n        const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            default:\r\n                throw new Error(errorPrefix('Query.on', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', eventType, true);\r\n        validateCallback('Query.off', 'callback', callback, true);\r\n        validateContextObject('Query.off', 'context', context, true);\r\n        if (callback) {\r\n            const valueCallback = () => { };\r\n            valueCallback.userCallback = callback;\r\n            valueCallback.context = context;\r\n            off(this._delegate, eventType, valueCallback);\r\n        }\r\n        else {\r\n            off(this._delegate, eventType);\r\n        }\r\n    }\r\n    /**\r\n     * Get the server-value for this query, or return a cached value if not connected.\r\n     */\r\n    get() {\r\n        return get(this._delegate).then(expSnapshot => {\r\n            return new DataSnapshot(this.database, expSnapshot);\r\n        });\r\n    }\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     */\r\n    once(eventType, callback, failureCallbackOrContext, context) {\r\n        validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateCallback('Query.once', 'callback', callback, true);\r\n        const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\r\n        const deferred = new Deferred();\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            const result = new DataSnapshot(this.database, expSnapshot);\r\n            if (callback) {\r\n                callback.call(ret.context, result, previousChildName);\r\n            }\r\n            deferred.resolve(result);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (error) => {\r\n            if (ret.cancel) {\r\n                ret.cancel.call(ret.context, error);\r\n            }\r\n            deferred.reject(error);\r\n        };\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            default:\r\n                throw new Error(errorPrefix('Query.once', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     */\r\n    limitToFirst(limit) {\r\n        validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToFirst(limit)));\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     */\r\n    limitToLast(limit) {\r\n        validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToLast(limit)));\r\n    }\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     */\r\n    orderByChild(path) {\r\n        validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByChild(path)));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     */\r\n    orderByKey() {\r\n        validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByKey()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     */\r\n    orderByPriority() {\r\n        validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByPriority()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     */\r\n    orderByValue() {\r\n        validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByValue()));\r\n    }\r\n    startAt(value = null, name) {\r\n        validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAt(value, name)));\r\n    }\r\n    startAfter(value = null, name) {\r\n        validateArgCount('Query.startAfter', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAfter(value, name)));\r\n    }\r\n    endAt(value = null, name) {\r\n        validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endAt(value, name)));\r\n    }\r\n    endBefore(value = null, name) {\r\n        validateArgCount('Query.endBefore', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endBefore(value, name)));\r\n    }\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     */\r\n    equalTo(value, name) {\r\n        validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, equalTo(value, name)));\r\n    }\r\n    /**\r\n     * @returns URL for this location.\r\n     */\r\n    toString() {\r\n        validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this._delegate.toString();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    toJSON() {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     */\r\n    isEqual(other) {\r\n        validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error);\r\n        }\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param fnName - The function name (on or once)\r\n     *\r\n     */\r\n    static getCancelAndContextArgs_(fnName, cancelOrContext, context) {\r\n        const ret = { cancel: undefined, context: undefined };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            validateCallback(fnName, 'cancel', ret.cancel, true);\r\n            ret.context = context;\r\n            validateContextObject(fnName, 'context', ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(errorPrefix(fnName, 'cancelOrContext') +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    get ref() {\r\n        return new Reference(this.database, new _ReferenceImpl(this._delegate._repo, this._delegate._path));\r\n    }\r\n}\r\nclass Reference extends Query {\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     */\r\n    constructor(database, _delegate) {\r\n        super(database, new _QueryImpl(_delegate._repo, _delegate._path, new _QueryParams(), false));\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /** @returns {?string} */\r\n    getKey() {\r\n        validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        return this._delegate.key;\r\n    }\r\n    child(pathString) {\r\n        validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        return new Reference(this.database, child(this._delegate, pathString));\r\n    }\r\n    /** @returns {?Reference} */\r\n    getParent() {\r\n        validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        const parent = this._delegate.parent;\r\n        return parent ? new Reference(this.database, parent) : null;\r\n    }\r\n    /** @returns {!Reference} */\r\n    getRoot() {\r\n        validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        return new Reference(this.database, this._delegate.root);\r\n    }\r\n    set(newVal, onComplete) {\r\n        validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateCallback('Reference.set', 'onComplete', onComplete, true);\r\n        const result = set(this._delegate, newVal);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(values, onComplete) {\r\n        validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        if (Array.isArray(values)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < values.length; ++i) {\r\n                newObjectToMerge['' + i] = values[i];\r\n            }\r\n            values = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        _validateWritablePath('Reference.update', this._delegate._path);\r\n        validateCallback('Reference.update', 'onComplete', onComplete, true);\r\n        const result = update(this._delegate, values);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(newVal, newPriority, onComplete) {\r\n        validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = setWithPriority(this._delegate, newVal, newPriority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateCallback('Reference.remove', 'onComplete', onComplete, true);\r\n        const result = remove(this._delegate);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    transaction(transactionUpdate, onComplete, applyLocally) {\r\n        validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\r\n        validateCallback('Reference.transaction', 'onComplete', onComplete, true);\r\n        validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\r\n        const result = runTransaction(this._delegate, transactionUpdate, {\r\n            applyLocally\r\n        }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));\r\n        if (onComplete) {\r\n            result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));\r\n        }\r\n        return result;\r\n    }\r\n    setPriority(priority, onComplete) {\r\n        validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\r\n        const result = setPriority(this._delegate, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    push(value, onComplete) {\r\n        validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateCallback('Reference.push', 'onComplete', onComplete, true);\r\n        const expPromise = push(this._delegate, value);\r\n        const promise = expPromise.then(expRef => new Reference(this.database, expRef));\r\n        if (onComplete) {\r\n            promise.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        const result = new Reference(this.database, expPromise);\r\n        result.then = promise.then.bind(promise);\r\n        result.catch = promise.catch.bind(promise, undefined);\r\n        return result;\r\n    }\r\n    onDisconnect() {\r\n        _validateWritablePath('Reference.onDisconnect', this._delegate._path);\r\n        return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\r\n    }\r\n    get key() {\r\n        return this.getKey();\r\n    }\r\n    get parent() {\r\n        return this.getParent();\r\n    }\r\n    get root() {\r\n        return this.getRoot();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n */\r\nclass Database {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     */\r\n    constructor(_delegate, app) {\r\n        this._delegate = _delegate;\r\n        this.app = app;\r\n        this.INTERNAL = {\r\n            delete: () => this._delegate._delete()\r\n        };\r\n    }\r\n    /**\r\n     * Modify this instance to communicate with the Realtime Database emulator.\r\n     *\r\n     * <p>Note: This method must be called before performing any other operation.\r\n     *\r\n     * @param host - the emulator host (ex: localhost)\r\n     * @param port - the emulator port (ex: 8080)\r\n     * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n     */\r\n    useEmulator(host, port, options = {}) {\r\n        connectDatabaseEmulator(this._delegate, host, port, options);\r\n    }\r\n    ref(path) {\r\n        validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            const childRef = refFromURL(this._delegate, path.toString());\r\n            return new Reference(this, childRef);\r\n        }\r\n        else {\r\n            const childRef = ref(this._delegate, path);\r\n            return new Reference(this, childRef);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @returns Firebase reference.\r\n     */\r\n    refFromURL(url) {\r\n        const apiName = 'database.refFromURL';\r\n        validateArgCount(apiName, 1, 1, arguments.length);\r\n        const childRef = refFromURL(this._delegate, url);\r\n        return new Reference(this, childRef);\r\n    }\r\n    // Make individual repo go offline.\r\n    goOffline() {\r\n        validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        return goOffline(this._delegate);\r\n    }\r\n    goOnline() {\r\n        validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        return goOnline(this._delegate);\r\n    }\r\n}\r\nDatabase.ServerValue = {\r\n    TIMESTAMP: serverTimestamp(),\r\n    increment: (delta) => increment(delta)\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\r\nfunction initStandalone({ app, url, version, customAuthImpl, namespace, nodeAdmin = false }) {\r\n    _setSDKVersion(version);\r\n    /**\r\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n     * any actual function.\r\n     */\r\n    const authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));\r\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* PRIVATE */));\r\n    return {\r\n        instance: new Database(_repoManagerDatabaseFromApp(app, authProvider, \r\n        /* appCheckProvider= */ undefined, url, nodeAdmin), app),\r\n        namespace\r\n    };\r\n}\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    instance.INTERNAL.registerComponent(new Component('database-compat', (container, { instanceIdentifier: url }) => {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app-compat').getImmediate();\r\n        const databaseExp = container\r\n            .getProvider('database')\r\n            .getImmediate({ identifier: url });\r\n        return new Database(databaseExp, app);\r\n    }, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(\r\n    // firebase.database namespace properties\r\n    {\r\n        Reference,\r\n        Query,\r\n        Database,\r\n        DataSnapshot,\r\n        enableLogging,\r\n        INTERNAL,\r\n        ServerValue\r\n    })\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterDatabase(firebase);\n\nexport { registerDatabase };\n//# sourceMappingURL=index.esm2017.js.map\n"]},"metadata":{},"sourceType":"module"}