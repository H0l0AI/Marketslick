{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { Reaction } from \"mobx\";\nimport React from \"react\";\nimport { printDebugValue } from \"./utils/printDebugValue\";\nimport { addReactionToTrack, recordReactionAsCommitted } from \"./utils/reactionCleanupTracking\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\n\nfunction observerComponentNameFor(baseComponentName) {\n  return \"observer\".concat(baseComponentName);\n}\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\n\n\nvar ObjectToBeRetainedByReact =\n/** @class */\nfunction () {\n  function ObjectToBeRetainedByReact() {}\n\n  return ObjectToBeRetainedByReact;\n}();\n\nfunction objectToBeRetainedByReactFactory() {\n  return new ObjectToBeRetainedByReact();\n}\n\nexport function useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n\n  var _a = __read(React.useState(objectToBeRetainedByReactFactory), 1),\n      objectRetainedByReact = _a[0]; // Force update, see #2982\n\n\n  var _b = __read(React.useState(), 2),\n      setState = _b[1];\n\n  var forceUpdate = function () {\n    return setState([]);\n  }; // StrictMode/ConcurrentMode/Suspense may mean that our component is\n  // rendered and abandoned multiple times, so we need to track leaked\n  // Reactions.\n\n\n  var reactionTrackingRef = React.useRef(null);\n\n  if (!reactionTrackingRef.current) {\n    // First render for this component (or first time since a previous\n    // reaction from an abandoned render was disposed).\n    var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n      // Observable has changed, meaning we want to re-render\n      // BUT if we're a component that hasn't yet got to the useEffect()\n      // stage, we might be a component that _started_ to render, but\n      // got dropped, and we don't want to make state changes then.\n      // (It triggers warnings in StrictMode, for a start.)\n      if (trackingData_1.mounted) {\n        // We have reached useEffect(), so we're mounted, and can trigger an update\n        forceUpdate();\n      } else {\n        // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n        // when (and if) useEffect() arrives.\n        trackingData_1.changedBeforeMount = true;\n      }\n    });\n    var trackingData_1 = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);\n  }\n\n  var reaction = reactionTrackingRef.current.reaction;\n  React.useDebugValue(reaction, printDebugValue);\n  React.useEffect(function () {\n    // Called on first mount only\n    recordReactionAsCommitted(reactionTrackingRef);\n\n    if (reactionTrackingRef.current) {\n      // Great. We've already got our reaction from our render;\n      // all we need to do is to record that it's now mounted,\n      // to allow future observable changes to trigger re-renders\n      reactionTrackingRef.current.mounted = true; // Got a change before first mount, force an update\n\n      if (reactionTrackingRef.current.changedBeforeMount) {\n        reactionTrackingRef.current.changedBeforeMount = false;\n        forceUpdate();\n      }\n    } else {\n      // The reaction we set up in our render has been disposed.\n      // This can be due to bad timings of renderings, e.g. our\n      // component was paused for a _very_ long time, and our\n      // reaction got cleaned up\n      // Re-create the reaction\n      reactionTrackingRef.current = {\n        reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n          // We've definitely already been mounted at this point\n          forceUpdate();\n        }),\n        mounted: true,\n        changedBeforeMount: false,\n        cleanAt: Infinity\n      };\n      forceUpdate();\n    }\n\n    return function () {\n      reactionTrackingRef.current.reaction.dispose();\n      reactionTrackingRef.current = null;\n    };\n  }, []); // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n\n  var rendering;\n  var exception;\n  reaction.track(function () {\n    try {\n      rendering = fn();\n    } catch (e) {\n      exception = e;\n    }\n  });\n\n  if (exception) {\n    throw exception; // re-throw any exceptions caught during rendering\n  }\n\n  return rendering;\n}","map":{"version":3,"sources":["/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/mobx-react-lite/es/useObserver.js"],"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","Reaction","React","printDebugValue","addReactionToTrack","recordReactionAsCommitted","isUsingStaticRendering","observerComponentNameFor","baseComponentName","concat","ObjectToBeRetainedByReact","objectToBeRetainedByReactFactory","useObserver","fn","_a","useState","objectRetainedByReact","_b","setState","forceUpdate","reactionTrackingRef","useRef","current","newReaction","trackingData_1","mounted","changedBeforeMount","reaction","useDebugValue","useEffect","cleanAt","Infinity","dispose","rendering","exception","track"],"mappings":"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","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { Reaction } from \"mobx\";\nimport React from \"react\";\nimport { printDebugValue } from \"./utils/printDebugValue\";\nimport { addReactionToTrack, recordReactionAsCommitted } from \"./utils/reactionCleanupTracking\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nfunction observerComponentNameFor(baseComponentName) {\n    return \"observer\".concat(baseComponentName);\n}\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\nvar ObjectToBeRetainedByReact = /** @class */ (function () {\n    function ObjectToBeRetainedByReact() {\n    }\n    return ObjectToBeRetainedByReact;\n}());\nfunction objectToBeRetainedByReactFactory() {\n    return new ObjectToBeRetainedByReact();\n}\nexport function useObserver(fn, baseComponentName) {\n    if (baseComponentName === void 0) { baseComponentName = \"observed\"; }\n    if (isUsingStaticRendering()) {\n        return fn();\n    }\n    var _a = __read(React.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a[0];\n    // Force update, see #2982\n    var _b = __read(React.useState(), 2), setState = _b[1];\n    var forceUpdate = function () { return setState([]); };\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    var reactionTrackingRef = React.useRef(null);\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n        var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData_1.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate();\n            }\n            else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.\n                trackingData_1.changedBeforeMount = true;\n            }\n        });\n        var trackingData_1 = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);\n    }\n    var reaction = reactionTrackingRef.current.reaction;\n    React.useDebugValue(reaction, printDebugValue);\n    React.useEffect(function () {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef);\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true;\n            // Got a change before first mount, force an update\n            if (reactionTrackingRef.current.changedBeforeMount) {\n                reactionTrackingRef.current.changedBeforeMount = false;\n                forceUpdate();\n            }\n        }\n        else {\n            // The reaction we set up in our render has been disposed.\n            // This can be due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n                    // We've definitely already been mounted at this point\n                    forceUpdate();\n                }),\n                mounted: true,\n                changedBeforeMount: false,\n                cleanAt: Infinity\n            };\n            forceUpdate();\n        }\n        return function () {\n            reactionTrackingRef.current.reaction.dispose();\n            reactionTrackingRef.current = null;\n        };\n    }, []);\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    var rendering;\n    var exception;\n    reaction.track(function () {\n        try {\n            rendering = fn();\n        }\n        catch (e) {\n            exception = e;\n        }\n    });\n    if (exception) {\n        throw exception; // re-throw any exceptions caught during rendering\n    }\n    return rendering;\n}\n//# sourceMappingURL=useObserver.js.map"]},"metadata":{},"sourceType":"module"}