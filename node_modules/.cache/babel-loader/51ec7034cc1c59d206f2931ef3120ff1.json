{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _asyncToGenerator from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar _ERRORS;\n\nimport _regeneratorRuntime from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/regenerator/index.js\";\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar APP_CHECK_STATES = new Map();\nvar DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nvar DEBUG_STATE = {\n  initialized: false,\n  enabled: false\n};\n\nfunction getState(app) {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nfunction setState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n}\n\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';\nvar EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nvar EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\nvar EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nvar TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\n\nvar ONE_DAY = 24 * 60 * 60 * 1000;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\n\nvar Refresher = /*#__PURE__*/function () {\n  function Refresher(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    _classCallCheck(this, Refresher);\n\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n\n  _createClass(Refresher, [{\n    key: \"start\",\n    value: function start() {\n      this.nextErrorWaitInterval = this.lowerBound;\n      this.process(true).catch(function () {\n        /* we don't care about the result */\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.pending) {\n        this.pending.reject('cancelled');\n        this.pending = null;\n      }\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return !!this.pending;\n    }\n  }, {\n    key: \"process\",\n    value: function () {\n      var _process = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(hasSucceeded) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.stop();\n                _context.prev = 1;\n                this.pending = new Deferred();\n                _context.next = 5;\n                return sleep(this.getNextRun(hasSucceeded));\n\n              case 5:\n                // Why do we resolve a promise, then immediate wait for it?\n                // We do it to make the promise chain cancellable.\n                // We can call stop() which rejects the promise before the following line execute, which makes\n                // the code jump to the catch block.\n                // TODO: unit test this\n                this.pending.resolve();\n                _context.next = 8;\n                return this.pending.promise;\n\n              case 8:\n                this.pending = new Deferred();\n                _context.next = 11;\n                return this.operation();\n\n              case 11:\n                this.pending.resolve();\n                _context.next = 14;\n                return this.pending.promise;\n\n              case 14:\n                this.process(true).catch(function () {\n                  /* we don't care about the result */\n                });\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](1);\n\n                if (this.retryPolicy(_context.t0)) {\n                  this.process(false).catch(function () {\n                    /* we don't care about the result */\n                  });\n                } else {\n                  this.stop();\n                }\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 17]]);\n      }));\n\n      function process(_x) {\n        return _process.apply(this, arguments);\n      }\n\n      return process;\n    }()\n  }, {\n    key: \"getNextRun\",\n    value: function getNextRun(hasSucceeded) {\n      if (hasSucceeded) {\n        // If last operation succeeded, reset next error wait interval and return\n        // the default wait duration.\n        this.nextErrorWaitInterval = this.lowerBound; // Return typical wait duration interval after a successful operation.\n\n        return this.getWaitDuration();\n      } else {\n        // Get next error wait interval.\n        var currentErrorWaitInterval = this.nextErrorWaitInterval; // Double interval for next consecutive error.\n\n        this.nextErrorWaitInterval *= 2; // Make sure next wait interval does not exceed the maximum upper bound.\n\n        if (this.nextErrorWaitInterval > this.upperBound) {\n          this.nextErrorWaitInterval = this.upperBound;\n        }\n\n        return currentErrorWaitInterval;\n      }\n    }\n  }]);\n\n  return Refresher;\n}();\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ERRORS = (_ERRORS = {}, _defineProperty(_ERRORS, \"already-initialized\"\n/* ALREADY_INITIALIZED */\n, 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.'), _defineProperty(_ERRORS, \"use-before-activation\"\n/* USE_BEFORE_ACTIVATION */\n, 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.'), _defineProperty(_ERRORS, \"fetch-network-error\"\n/* FETCH_NETWORK_ERROR */\n, 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"fetch-parse-error\"\n/* FETCH_PARSE_ERROR */\n, 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"fetch-status-error\"\n/* FETCH_STATUS_ERROR */\n, 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'), _defineProperty(_ERRORS, \"storage-open\"\n/* STORAGE_OPEN */\n, 'Error thrown when opening storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"storage-get\"\n/* STORAGE_GET */\n, 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"storage-set\"\n/* STORAGE_WRITE */\n, 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"recaptcha-error\"\n/* RECAPTCHA_ERROR */\n, 'ReCAPTCHA error.'), _defineProperty(_ERRORS, \"throttled\"\n/* THROTTLED */\n, \"Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}\"), _ERRORS);\nvar ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction getRecaptcha() {\n  var isEnterprise = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _a;\n\n  if (isEnterprise) {\n    return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\n  }\n\n  return self.grecaptcha;\n}\n\nfunction ensureActivated(app) {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\"\n    /* USE_BEFORE_ACTIVATION */\n    , {\n      appName: app.name\n    });\n  }\n}\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n */\n\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction getDurationString(durationInMillis) {\n  var totalSeconds = Math.round(durationInMillis / 1000);\n  var days = Math.floor(totalSeconds / (3600 * 24));\n  var hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  var minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\n  var seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n  var result = '';\n\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value) {\n  if (value === 0) {\n    return '00';\n  }\n\n  return value >= 10 ? value.toString() : '0' + value;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction exchangeToken(_x2, _x3) {\n  return _exchangeToken.apply(this, arguments);\n}\n\nfunction _exchangeToken() {\n  _exchangeToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref, platformLoggerProvider) {\n    var url, body, headers, platformLogger, options, response, responseBody, match, timeToLiveAsNumber, now;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            url = _ref.url, body = _ref.body;\n            headers = {\n              'Content-Type': 'application/json'\n            }; // If platform logger exists, add the platform info string to the header.\n\n            platformLogger = platformLoggerProvider.getImmediate({\n              optional: true\n            });\n\n            if (platformLogger) {\n              headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n            }\n\n            options = {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: headers\n            };\n            _context6.prev = 5;\n            _context6.next = 8;\n            return fetch(url, options);\n\n          case 8:\n            response = _context6.sent;\n            _context6.next = 14;\n            break;\n\n          case 11:\n            _context6.prev = 11;\n            _context6.t0 = _context6[\"catch\"](5);\n            throw ERROR_FACTORY.create(\"fetch-network-error\"\n            /* FETCH_NETWORK_ERROR */\n            , {\n              originalErrorMessage: _context6.t0.message\n            });\n\n          case 14:\n            if (!(response.status !== 200)) {\n              _context6.next = 16;\n              break;\n            }\n\n            throw ERROR_FACTORY.create(\"fetch-status-error\"\n            /* FETCH_STATUS_ERROR */\n            , {\n              httpStatus: response.status\n            });\n\n          case 16:\n            _context6.prev = 16;\n            _context6.next = 19;\n            return response.json();\n\n          case 19:\n            responseBody = _context6.sent;\n            _context6.next = 25;\n            break;\n\n          case 22:\n            _context6.prev = 22;\n            _context6.t1 = _context6[\"catch\"](16);\n            throw ERROR_FACTORY.create(\"fetch-parse-error\"\n            /* FETCH_PARSE_ERROR */\n            , {\n              originalErrorMessage: _context6.t1.message\n            });\n\n          case 25:\n            // Protobuf duration format.\n            // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n            match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n\n            if (!(!match || !match[2] || isNaN(Number(match[1])))) {\n              _context6.next = 28;\n              break;\n            }\n\n            throw ERROR_FACTORY.create(\"fetch-parse-error\"\n            /* FETCH_PARSE_ERROR */\n            , {\n              originalErrorMessage: \"ttl field (timeToLive) is not in standard Protobuf Duration \" + \"format: \".concat(responseBody.ttl)\n            });\n\n          case 28:\n            timeToLiveAsNumber = Number(match[1]) * 1000;\n            now = Date.now();\n            return _context6.abrupt(\"return\", {\n              token: responseBody.attestationToken,\n              expireTimeMillis: now + timeToLiveAsNumber,\n              issuedAtTimeMillis: now\n            });\n\n          case 31:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[5, 11], [16, 22]]);\n  }));\n  return _exchangeToken.apply(this, arguments);\n}\n\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\n  var _app$options = app.options,\n      projectId = _app$options.projectId,\n      appId = _app$options.appId,\n      apiKey = _app$options.apiKey;\n  return {\n    url: \"\".concat(BASE_ENDPOINT, \"/projects/\").concat(projectId, \"/apps/\").concat(appId, \":\").concat(EXCHANGE_RECAPTCHA_TOKEN_METHOD, \"?key=\").concat(apiKey),\n    body: {\n      'recaptcha_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\n  var _app$options2 = app.options,\n      projectId = _app$options2.projectId,\n      appId = _app$options2.appId,\n      apiKey = _app$options2.apiKey;\n  return {\n    url: \"\".concat(BASE_ENDPOINT, \"/projects/\").concat(projectId, \"/apps/\").concat(appId, \":\").concat(EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD, \"?key=\").concat(apiKey),\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  var _app$options3 = app.options,\n      projectId = _app$options3.projectId,\n      appId = _app$options3.appId,\n      apiKey = _app$options3.apiKey;\n  return {\n    url: \"\".concat(BASE_ENDPOINT, \"/projects/\").concat(projectId, \"/apps/\").concat(appId, \":\").concat(EXCHANGE_DEBUG_TOKEN_METHOD, \"?key=\").concat(apiKey),\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DB_NAME = 'firebase-app-check-database';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'firebase-app-check-store';\nvar DEBUG_TOKEN_KEY = 'debug-token';\nvar dbPromise = null;\n\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise(function (resolve, reject) {\n    try {\n      var request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = function (event) {\n        resolve(event.target.result);\n      };\n\n      request.onerror = function (event) {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-open\"\n        /* STORAGE_OPEN */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n\n      request.onupgradeneeded = function (event) {\n        var db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: e.message\n      }));\n    }\n  });\n  return dbPromise;\n}\n\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\n\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\n\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\n\nfunction write(_x4, _x5) {\n  return _write.apply(this, arguments);\n}\n\nfunction _write() {\n  _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, value) {\n    var db, transaction, store, request;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return getDBPromise();\n\n          case 2:\n            db = _context7.sent;\n            transaction = db.transaction(STORE_NAME, 'readwrite');\n            store = transaction.objectStore(STORE_NAME);\n            request = store.put({\n              compositeKey: key,\n              value: value\n            });\n            return _context7.abrupt(\"return\", new Promise(function (resolve, reject) {\n              request.onsuccess = function (_event) {\n                resolve();\n              };\n\n              transaction.onerror = function (event) {\n                var _a;\n\n                reject(ERROR_FACTORY.create(\"storage-set\"\n                /* STORAGE_WRITE */\n                , {\n                  originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n                }));\n              };\n            }));\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _write.apply(this, arguments);\n}\n\nfunction read(_x6) {\n  return _read.apply(this, arguments);\n}\n\nfunction _read() {\n  _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(key) {\n    var db, transaction, store, request;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return getDBPromise();\n\n          case 2:\n            db = _context8.sent;\n            transaction = db.transaction(STORE_NAME, 'readonly');\n            store = transaction.objectStore(STORE_NAME);\n            request = store.get(key);\n            return _context8.abrupt(\"return\", new Promise(function (resolve, reject) {\n              request.onsuccess = function (event) {\n                var result = event.target.result;\n\n                if (result) {\n                  resolve(result.value);\n                } else {\n                  resolve(undefined);\n                }\n              };\n\n              transaction.onerror = function (event) {\n                var _a;\n\n                reject(ERROR_FACTORY.create(\"storage-get\"\n                /* STORAGE_GET */\n                , {\n                  originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n                }));\n              };\n            }));\n\n          case 7:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _read.apply(this, arguments);\n}\n\nfunction computeKey(app) {\n  return \"\".concat(app.options.appId, \"-\").concat(app.name);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar logger = new Logger('@firebase/app-check');\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\n\nfunction readTokenFromStorage(_x7) {\n  return _readTokenFromStorage.apply(this, arguments);\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\n\n\nfunction _readTokenFromStorage() {\n  _readTokenFromStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(app) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!isIndexedDBAvailable()) {\n              _context9.next = 12;\n              break;\n            }\n\n            token = undefined;\n            _context9.prev = 2;\n            _context9.next = 5;\n            return readTokenFromIndexedDB(app);\n\n          case 5:\n            token = _context9.sent;\n            _context9.next = 11;\n            break;\n\n          case 8:\n            _context9.prev = 8;\n            _context9.t0 = _context9[\"catch\"](2);\n            // swallow the error and return undefined\n            logger.warn(\"Failed to read token from IndexedDB. Error: \".concat(_context9.t0));\n\n          case 11:\n            return _context9.abrupt(\"return\", token);\n\n          case 12:\n            return _context9.abrupt(\"return\", undefined);\n\n          case 13:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[2, 8]]);\n  }));\n  return _readTokenFromStorage.apply(this, arguments);\n}\n\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(function (e) {\n      // swallow the error and resolve the promise\n      logger.warn(\"Failed to write token to IndexedDB. Error: \".concat(e));\n    });\n  }\n\n  return Promise.resolve();\n}\n\nfunction readOrCreateDebugTokenFromStorage() {\n  return _readOrCreateDebugTokenFromStorage.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _readOrCreateDebugTokenFromStorage() {\n  _readOrCreateDebugTokenFromStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n    var existingDebugToken, newToken;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            /**\r\n             * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n             * But it won't happen here, because this function will be called exactly once.\r\n             */\n            existingDebugToken = undefined;\n            _context10.prev = 1;\n            _context10.next = 4;\n            return readDebugTokenFromIndexedDB();\n\n          case 4:\n            existingDebugToken = _context10.sent;\n            _context10.next = 9;\n            break;\n\n          case 7:\n            _context10.prev = 7;\n            _context10.t0 = _context10[\"catch\"](1);\n\n          case 9:\n            if (existingDebugToken) {\n              _context10.next = 15;\n              break;\n            }\n\n            // create a new debug token\n            newToken = uuidv4(); // We don't need to block on writing to indexeddb\n            // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n            // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n            // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n            // You should switch to a different browser that supports indexeddb\n\n            writeDebugTokenToIndexedDB(newToken).catch(function (e) {\n              return logger.warn(\"Failed to persist debug token to IndexedDB. Error: \".concat(e));\n            });\n            return _context10.abrupt(\"return\", newToken);\n\n          case 15:\n            return _context10.abrupt(\"return\", existingDebugToken);\n\n          case 16:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[1, 7]]);\n  }));\n  return _readOrCreateDebugTokenFromStorage.apply(this, arguments);\n}\n\nfunction isDebugMode() {\n  var debugState = getDebugState();\n  return debugState.enabled;\n}\n\nfunction getDebugToken() {\n  return _getDebugToken.apply(this, arguments);\n}\n\nfunction _getDebugToken() {\n  _getDebugToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n    var state;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            state = getDebugState();\n\n            if (!(state.enabled && state.token)) {\n              _context11.next = 5;\n              break;\n            }\n\n            return _context11.abrupt(\"return\", state.token.promise);\n\n          case 5:\n            throw Error(\"\\n            Can't get debug token in production mode.\\n        \");\n\n          case 6:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _getDebugToken.apply(this, arguments);\n}\n\nfunction initializeDebugMode() {\n  var globals = getGlobal();\n  var debugState = getDebugState(); // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n\n  debugState.initialized = true;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n\n  debugState.enabled = true;\n  var deferredToken = new Deferred();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\n\n\nvar defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\n\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData),\n  /* webSafe= */\n  false);\n}\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\n\n\nfunction getToken$2(_x8) {\n  return _getToken$.apply(this, arguments);\n}\n\nfunction _getToken$() {\n  _getToken$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(appCheck) {\n    var forceRefresh,\n        app,\n        state,\n        token,\n        error,\n        cachedToken,\n        shouldCallListeners,\n        tokenFromDebugExchange,\n        interopTokenResult,\n        _args12 = arguments;\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            forceRefresh = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : false;\n            app = appCheck.app;\n            ensureActivated(app);\n            state = getState(app);\n            /**\r\n             * First check if there is a token in memory from a previous `getToken()` call.\r\n             */\n\n            token = state.token;\n            error = undefined;\n            /**\r\n             * If there is no token in memory, try to load token from indexedDB.\r\n             */\n\n            if (token) {\n              _context12.next = 11;\n              break;\n            }\n\n            _context12.next = 9;\n            return state.cachedTokenPromise;\n\n          case 9:\n            cachedToken = _context12.sent;\n\n            if (cachedToken && isValid(cachedToken)) {\n              token = cachedToken;\n            }\n\n          case 11:\n            if (!(!forceRefresh && token && isValid(token))) {\n              _context12.next = 13;\n              break;\n            }\n\n            return _context12.abrupt(\"return\", {\n              token: token.token\n            });\n\n          case 13:\n            // Only set to true if this `getToken()` call is making the actual\n            // REST call to the exchange endpoint, versus waiting for an already\n            // in-flight call (see debug and regular exchange endpoint paths below)\n            shouldCallListeners = false;\n            /**\r\n             * DEBUG MODE\r\n             * If debug mode is set, and there is no cached token, fetch a new App\r\n             * Check token using the debug token, and return it directly.\r\n             */\n\n            if (!isDebugMode()) {\n              _context12.next = 33;\n              break;\n            }\n\n            if (state.exchangeTokenPromise) {\n              _context12.next = 26;\n              break;\n            }\n\n            _context12.t0 = exchangeToken;\n            _context12.t1 = getExchangeDebugTokenRequest;\n            _context12.t2 = app;\n            _context12.next = 21;\n            return getDebugToken();\n\n          case 21:\n            _context12.t3 = _context12.sent;\n            _context12.t4 = (0, _context12.t1)(_context12.t2, _context12.t3);\n            _context12.t5 = appCheck.platformLoggerProvider;\n            state.exchangeTokenPromise = (0, _context12.t0)(_context12.t4, _context12.t5).then(function (token) {\n              state.exchangeTokenPromise = undefined;\n              return token;\n            });\n            shouldCallListeners = true;\n\n          case 26:\n            _context12.next = 28;\n            return state.exchangeTokenPromise;\n\n          case 28:\n            tokenFromDebugExchange = _context12.sent;\n            _context12.next = 31;\n            return writeTokenToStorage(app, tokenFromDebugExchange);\n\n          case 31:\n            // Write debug token to state.\n            setState(app, Object.assign(Object.assign({}, state), {\n              token: tokenFromDebugExchange\n            }));\n            return _context12.abrupt(\"return\", {\n              token: tokenFromDebugExchange.token\n            });\n\n          case 33:\n            _context12.prev = 33;\n\n            // Avoid making another call to the exchange endpoint if one is in flight.\n            if (!state.exchangeTokenPromise) {\n              // state.provider is populated in initializeAppCheck()\n              // ensureActivated() at the top of this function checks that\n              // initializeAppCheck() has been called.\n              state.exchangeTokenPromise = state.provider.getToken().then(function (token) {\n                state.exchangeTokenPromise = undefined;\n                return token;\n              });\n              shouldCallListeners = true;\n            }\n\n            _context12.next = 37;\n            return state.exchangeTokenPromise;\n\n          case 37:\n            token = _context12.sent;\n            _context12.next = 44;\n            break;\n\n          case 40:\n            _context12.prev = 40;\n            _context12.t6 = _context12[\"catch\"](33);\n\n            if (_context12.t6.code === \"appCheck/\".concat(\"throttled\"\n            /* THROTTLED */\n            )) {\n              // Warn if throttled, but do not treat it as an error.\n              logger.warn(_context12.t6.message);\n            } else {\n              // `getToken()` should never throw, but logging error text to console will aid debugging.\n              logger.error(_context12.t6);\n            } // Always save error to be added to dummy token.\n\n\n            error = _context12.t6;\n\n          case 44:\n            if (token) {\n              _context12.next = 48;\n              break;\n            }\n\n            // if token is undefined, there must be an error.\n            // we return a dummy token along with the error\n            interopTokenResult = makeDummyTokenResult(error);\n            _context12.next = 52;\n            break;\n\n          case 48:\n            interopTokenResult = {\n              token: token.token\n            }; // write the new token to the memory state as well as the persistent storage.\n            // Only do it if we got a valid new token\n\n            setState(app, Object.assign(Object.assign({}, state), {\n              token: token\n            }));\n            _context12.next = 52;\n            return writeTokenToStorage(app, token);\n\n          case 52:\n            if (shouldCallListeners) {\n              notifyTokenListeners(app, interopTokenResult);\n            }\n\n            return _context12.abrupt(\"return\", interopTokenResult);\n\n          case 54:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12, null, [[33, 40]]);\n  }));\n  return _getToken$.apply(this, arguments);\n}\n\nfunction _addTokenListener(appCheck, type, listener, onError) {\n  var app = appCheck.app;\n  var state = getState(app);\n  var tokenObserver = {\n    next: listener,\n    error: onError,\n    type: type\n  };\n  setState(app, Object.assign(Object.assign({}, state), {\n    tokenObservers: [].concat(_toConsumableArray(state.tokenObservers), [tokenObserver])\n  })); // Invoke the listener async immediately if there is a valid token\n  // in memory.\n\n  if (state.token && isValid(state.token)) {\n    var validToken = state.token;\n    Promise.resolve().then(function () {\n      listener({\n        token: validToken.token\n      });\n      initTokenRefresher(appCheck);\n    }).catch(function () {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  }\n  /**\r\n   * Wait for any cached token promise to resolve before starting the token\r\n   * refresher. The refresher checks to see if there is an existing token\r\n   * in state and calls the exchange endpoint if not. We should first let the\r\n   * IndexedDB check have a chance to populate state if it can.\r\n   *\r\n   * Listener call isn't needed here because cachedTokenPromise will call any\r\n   * listeners that exist when it resolves.\r\n   */\n  // state.cachedTokenPromise is always populated in `activate()`.\n\n\n  void state.cachedTokenPromise.then(function () {\n    return initTokenRefresher(appCheck);\n  });\n}\n\nfunction _removeTokenListener(app, listener) {\n  var state = getState(app);\n  var newObservers = state.tokenObservers.filter(function (tokenObserver) {\n    return tokenObserver.next !== listener;\n  });\n\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, Object.assign(Object.assign({}, state), {\n    tokenObservers: newObservers\n  }));\n}\n/**\r\n * Logic to create and start refresher as needed.\r\n */\n\n\nfunction initTokenRefresher(appCheck) {\n  var app = appCheck.app;\n  var state = getState(app); // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n\n  var refresher = state.tokenRefresher;\n\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    setState(app, Object.assign(Object.assign({}, state), {\n      tokenRefresher: refresher\n    }));\n  }\n\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck) {\n  var app = appCheck.app;\n  return new Refresher(\n  /*#__PURE__*/\n  // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var state, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            state = getState(app); // If there is no token, we will try to load it from storage and use it\n            // If there is a token, we force refresh it because we know it's going to expire soon\n\n            if (state.token) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 4;\n            return getToken$2(appCheck);\n\n          case 4:\n            result = _context2.sent;\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.next = 9;\n            return getToken$2(appCheck, true);\n\n          case 9:\n            result = _context2.sent;\n\n          case 10:\n            if (!result.error) {\n              _context2.next = 12;\n              break;\n            }\n\n            throw result.error;\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), function () {\n    return true;\n  }, function () {\n    var state = getState(app);\n\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      var nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000; // Do not allow refresh time to be past (expireTime - 5 minutes)\n\n      var latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\n\nfunction notifyTokenListeners(app, token) {\n  var observers = getState(app).tokenObservers;\n\n  var _iterator = _createForOfIteratorHelper(observers),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var observer = _step.value;\n\n      try {\n        if (observer.type === \"EXTERNAL\"\n        /* EXTERNAL */\n        && token.error != null) {\n          // If this listener was added by a 3P call, send any token error to\n          // the supplied error handler. A 3P observer always has an error\n          // handler.\n          observer.error(token.error);\n        } else {\n          // If the token has no error field, always return the token.\n          // If this is a 2P listener, return the token, whether or not it\n          // has an error field.\n          observer.next(token);\n        }\n      } catch (e) {// Errors in the listener function itself are always ignored.\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error: error\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * AppCheck Service class.\r\n */\n\n\nvar AppCheckService = /*#__PURE__*/function () {\n  function AppCheckService(app, platformLoggerProvider) {\n    _classCallCheck(this, AppCheckService);\n\n    this.app = app;\n    this.platformLoggerProvider = platformLoggerProvider;\n  }\n\n  _createClass(AppCheckService, [{\n    key: \"_delete\",\n    value: function _delete() {\n      var _getState = getState(this.app),\n          tokenObservers = _getState.tokenObservers;\n\n      var _iterator2 = _createForOfIteratorHelper(tokenObservers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tokenObserver = _step2.value;\n\n          _removeTokenListener(this.app, tokenObserver.next);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return Promise.resolve();\n    }\n  }]);\n\n  return AppCheckService;\n}();\n\nfunction factory(app, platformLoggerProvider) {\n  return new AppCheckService(app, platformLoggerProvider);\n}\n\nfunction internalFactory(appCheck) {\n  return {\n    getToken: function getToken(forceRefresh) {\n      return getToken$2(appCheck, forceRefresh);\n    },\n    addTokenListener: function addTokenListener(listener) {\n      return _addTokenListener(appCheck, \"INTERNAL\"\n      /* INTERNAL */\n      , listener);\n    },\n    removeTokenListener: function removeTokenListener(listener) {\n      return _removeTokenListener(appCheck.app, listener);\n    }\n  };\n}\n\nvar name = \"@firebase/app-check\";\nvar version = \"0.5.3\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nvar RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\n\nfunction initializeV3(app, siteKey) {\n  var state = getState(app);\n  var initialized = new Deferred();\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: {\n      initialized: initialized\n    }\n  }));\n  var divId = makeDiv(app);\n  var grecaptcha = getRecaptcha(false);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(function () {\n      var grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n\nfunction initializeEnterprise(app, siteKey) {\n  var state = getState(app);\n  var initialized = new Deferred();\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: {\n      initialized: initialized\n    }\n  }));\n  var divId = makeDiv(app);\n  var grecaptcha = getRecaptcha(true);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(function () {\n      var grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\n\n\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\n  grecaptcha.ready(function () {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n/**\r\n * Add invisible div to page.\r\n */\n\n\nfunction makeDiv(app) {\n  var divId = \"fire_app_check_\".concat(app.name);\n  var invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nfunction getToken$1(_x9) {\n  return _getToken$2.apply(this, arguments);\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\n\n\nfunction _getToken$2() {\n  _getToken$2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(app) {\n    var reCAPTCHAState, recaptcha;\n    return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            ensureActivated(app); // ensureActivated() guarantees that reCAPTCHAState is set\n\n            reCAPTCHAState = getState(app).reCAPTCHAState;\n            _context13.next = 4;\n            return reCAPTCHAState.initialized.promise;\n\n          case 4:\n            recaptcha = _context13.sent;\n            return _context13.abrupt(\"return\", new Promise(function (resolve, _reject) {\n              // Updated after initialization is complete.\n              var reCAPTCHAState = getState(app).reCAPTCHAState;\n              recaptcha.ready(function () {\n                resolve( // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n                recaptcha.execute(reCAPTCHAState.widgetId, {\n                  action: 'fire_app_check'\n                }));\n              });\n            }));\n\n          case 6:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  }));\n  return _getToken$2.apply(this, arguments);\n}\n\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  var widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  var state = getState(app);\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: Object.assign(Object.assign({}, state.reCAPTCHAState), {\n      // state.reCAPTCHAState is set in the initialize()\n      widgetId: widgetId\n    })\n  }));\n}\n\nfunction loadReCAPTCHAV3Script(onload) {\n  var script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload) {\n  var script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nvar ReCaptchaV3Provider = /*#__PURE__*/function () {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  function ReCaptchaV3Provider(_siteKey) {\n    _classCallCheck(this, ReCaptchaV3Provider);\n\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  _createClass(ReCaptchaV3Provider, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _a, attestedClaimsToken, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throwIfThrottled(this._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n                // and therefore this._app and this._platformLoggerProvider are available.\n\n                _context3.next = 3;\n                return getToken$1(this._app).catch(function (_e) {\n                  // reCaptcha.execute() throws null which is not very descriptive.\n                  throw ERROR_FACTORY.create(\"recaptcha-error\"\n                  /* RECAPTCHA_ERROR */\n                  );\n                });\n\n              case 3:\n                attestedClaimsToken = _context3.sent;\n                _context3.prev = 4;\n                _context3.next = 7;\n                return exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider);\n\n              case 7:\n                result = _context3.sent;\n                _context3.next = 18;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](4);\n\n                if (!(_context3.t0.code === \"fetch-status-error\"\n                /* FETCH_STATUS_ERROR */\n                )) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                this._throttleData = setBackoff(Number((_a = _context3.t0.customData) === null || _a === void 0 ? void 0 : _a.httpStatus), this._throttleData);\n                throw ERROR_FACTORY.create(\"throttled\"\n                /* THROTTLED */\n                , {\n                  time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n                  httpStatus: this._throttleData.httpStatus\n                });\n\n              case 17:\n                throw _context3.t0;\n\n              case 18:\n                // If successful, clear throttle data.\n                this._throttleData = null;\n                return _context3.abrupt(\"return\", result);\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 10]]);\n      }));\n\n      function getToken() {\n        return _getToken.apply(this, arguments);\n      }\n\n      return getToken;\n    }()\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize(app) {\n      this._app = app;\n      this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n      initializeV3(app, this._siteKey).catch(function () {\n        /* we don't care about the initialization result */\n      });\n    }\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherProvider) {\n      if (otherProvider instanceof ReCaptchaV3Provider) {\n        return this._siteKey === otherProvider._siteKey;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return ReCaptchaV3Provider;\n}();\n/**\r\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nvar ReCaptchaEnterpriseProvider = /*#__PURE__*/function () {\n  /**\r\n   * Create a ReCaptchaEnterpriseProvider instance.\r\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n   */\n  function ReCaptchaEnterpriseProvider(_siteKey) {\n    _classCallCheck(this, ReCaptchaEnterpriseProvider);\n\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  _createClass(ReCaptchaEnterpriseProvider, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _a, attestedClaimsToken, result;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throwIfThrottled(this._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n                // and therefore this._app and this._platformLoggerProvider are available.\n\n                _context4.next = 3;\n                return getToken$1(this._app).catch(function (_e) {\n                  // reCaptcha.execute() throws null which is not very descriptive.\n                  throw ERROR_FACTORY.create(\"recaptcha-error\"\n                  /* RECAPTCHA_ERROR */\n                  );\n                });\n\n              case 3:\n                attestedClaimsToken = _context4.sent;\n                _context4.prev = 4;\n                _context4.next = 7;\n                return exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider);\n\n              case 7:\n                result = _context4.sent;\n                _context4.next = 18;\n                break;\n\n              case 10:\n                _context4.prev = 10;\n                _context4.t0 = _context4[\"catch\"](4);\n\n                if (!(_context4.t0.code === \"fetch-status-error\"\n                /* FETCH_STATUS_ERROR */\n                )) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                this._throttleData = setBackoff(Number((_a = _context4.t0.customData) === null || _a === void 0 ? void 0 : _a.httpStatus), this._throttleData);\n                throw ERROR_FACTORY.create(\"throttled\"\n                /* THROTTLED */\n                , {\n                  time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n                  httpStatus: this._throttleData.httpStatus\n                });\n\n              case 17:\n                throw _context4.t0;\n\n              case 18:\n                // If successful, clear throttle data.\n                this._throttleData = null;\n                return _context4.abrupt(\"return\", result);\n\n              case 20:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[4, 10]]);\n      }));\n\n      function getToken() {\n        return _getToken2.apply(this, arguments);\n      }\n\n      return getToken;\n    }()\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize(app) {\n      this._app = app;\n      this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n      initializeEnterprise(app, this._siteKey).catch(function () {\n        /* we don't care about the initialization result */\n      });\n    }\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherProvider) {\n      if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n        return this._siteKey === otherProvider._siteKey;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return ReCaptchaEnterpriseProvider;\n}();\n/**\r\n * Custom provider class.\r\n * @public\r\n */\n\n\nvar CustomProvider = /*#__PURE__*/function () {\n  function CustomProvider(_customProviderOptions) {\n    _classCallCheck(this, CustomProvider);\n\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  _createClass(CustomProvider, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var customToken, issuedAtTimeSeconds, issuedAtTimeMillis;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._customProviderOptions.getToken();\n\n              case 2:\n                customToken = _context5.sent;\n                // Try to extract IAT from custom token, in case this token is not\n                // being newly issued. JWT timestamps are in seconds since epoch.\n                issuedAtTimeSeconds = issuedAtTime(customToken.token); // Very basic validation, use current timestamp as IAT if JWT\n                // has no `iat` field or value is out of bounds.\n\n                issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n                return _context5.abrupt(\"return\", Object.assign(Object.assign({}, customToken), {\n                  issuedAtTimeMillis: issuedAtTimeMillis\n                }));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getToken() {\n        return _getToken3.apply(this, arguments);\n      }\n\n      return getToken;\n    }()\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize(app) {\n      this._app = app;\n    }\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherProvider) {\n      if (otherProvider instanceof CustomProvider) {\n        return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return CustomProvider;\n}();\n/**\r\n * Set throttle data to block requests until after a certain time\r\n * depending on the failed request's status code.\r\n * @param httpStatus - Status code of failed request.\r\n * @param throttleData - `ThrottleData` object containing previous throttle\r\n * data state.\r\n * @returns Data about current throttle state and expiration time.\r\n */\n\n\nfunction setBackoff(httpStatus, throttleData) {\n  /**\r\n   * Block retries for 1 day for the following error codes:\r\n   *\r\n   * 404: Likely malformed URL.\r\n   *\r\n   * 403:\r\n   * - Attestation failed\r\n   * - Wrong API key\r\n   * - Project deleted\r\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus: httpStatus\n    };\n  } else {\n    /**\r\n     * For all other error codes, the time when it is ok to retry again\r\n     * is based on exponential backoff.\r\n     */\n    var backoffCount = throttleData ? throttleData.backoffCount : 0;\n    var backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus: httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData) {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(\"throttled\"\n      /* THROTTLED */\n      , {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\n\n\nfunction initializeAppCheck() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n\n  var provider = _getProvider(app, 'app-check'); // Ensure initializeDebugMode() is only called once.\n\n\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  } // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n\n\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(function (token) {\n      return (// Not using logger because I don't think we ever want this accidentally hidden.\n        console.log(\"App Check debug token: \".concat(token, \". You will need to add it to your app's App Check settings in the Firebase console for it to work.\"))\n      );\n    });\n  }\n\n  if (provider.isInitialized()) {\n    var existingInstance = provider.getImmediate();\n    var initialOptions = provider.getOptions();\n\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\"\n      /* ALREADY_INITIALIZED */\n      , {\n        appName: app.name\n      });\n    }\n  }\n\n  var appCheck = provider.initialize({\n    options: options\n  });\n\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled); // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n\n\n  if (getState(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    _addTokenListener(appCheck, \"INTERNAL\"\n    /* INTERNAL */\n    , function () {});\n  }\n\n  return appCheck;\n}\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\n\n\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\n  var state = getState(app);\n  var newState = Object.assign(Object.assign({}, state), {\n    activated: true\n  });\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(function (cachedToken) {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, Object.assign(Object.assign({}, getState(app)), {\n        token: cachedToken\n      })); // notify all listeners with the cached token\n\n      notifyTokenListeners(app, {\n        token: cachedToken.token\n      });\n    }\n\n    return cachedToken;\n  }); // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n\n  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  setState(app, newState);\n  newState.provider.initialize(app);\n}\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\n\n\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  var app = appCheckInstance.app;\n  var state = getState(app); // This will exist if any product libraries have called\n  // `addTokenListener()`\n\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n\n  setState(app, Object.assign(Object.assign({}, state), {\n    isTokenAutoRefreshEnabled: isTokenAutoRefreshEnabled\n  }));\n}\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\n\n\nfunction getToken(_x10, _x11) {\n  return _getToken4.apply(this, arguments);\n}\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\n\n\nfunction _getToken4() {\n  _getToken4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(appCheckInstance, forceRefresh) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _context14.next = 2;\n            return getToken$2(appCheckInstance, forceRefresh);\n\n          case 2:\n            result = _context14.sent;\n\n            if (!result.error) {\n              _context14.next = 5;\n              break;\n            }\n\n            throw result.error;\n\n          case 5:\n            return _context14.abrupt(\"return\", {\n              token: result.token\n            });\n\n          case 6:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  }));\n  return _getToken4.apply(this, arguments);\n}\n\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  var nextFn = function nextFn() {};\n\n  var errorFn = function errorFn() {};\n\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n\n  _addTokenListener(appCheckInstance, \"EXTERNAL\"\n  /* EXTERNAL */\n  , nextFn, errorFn);\n\n  return function () {\n    return _removeTokenListener(appCheckInstance.app, nextFn);\n  };\n}\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\n\n\nvar APP_CHECK_NAME = 'app-check';\nvar APP_CHECK_NAME_INTERNAL = 'app-check-internal';\n\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var platformLoggerProvider = container.getProvider('platform-logger');\n    return factory(app, platformLoggerProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  )\n  /**\r\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n   * other Firebase SDKs\r\n   */\n  .setInstanceCreatedCallback(function (container, _identifier, _appcheckService) {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  })); // The internal interface used by other Firebase products\n\n\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, function (container) {\n    var appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  ));\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };","map":{"version":3,"mappings":"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","names":["APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","initialized","enabled","getState","app","get","setState","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","ONE_DAY","Refresher","operation","retryPolicy","getWaitDuration","lowerBound","upperBound","nextErrorWaitInterval","Error","process","catch","pending","reject","hasSucceeded","stop","Deferred","sleep","getNextRun","resolve","promise","currentErrorWaitInterval","ms","Promise","setTimeout","ERRORS","ERROR_FACTORY","ErrorFactory","getRecaptcha","isEnterprise","grecaptcha","_a","enterprise","self","ensureActivated","create","appName","name","uuidv4","replace","r","Math","random","v","c","toString","getDurationString","durationInMillis","totalSeconds","round","days","floor","hours","minutes","seconds","result","pad","value","exchangeToken","platformLoggerProvider","url","body","headers","platformLogger","getImmediate","optional","getPlatformInfoString","options","method","JSON","stringify","fetch","response","originalErrorMessage","message","status","httpStatus","json","responseBody","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","attestationToken","expireTimeMillis","issuedAtTimeMillis","getExchangeRecaptchaV3TokenRequest","reCAPTCHAToken","projectId","appId","apiKey","getExchangeRecaptchaEnterpriseTokenRequest","getExchangeDebugTokenRequest","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","onerror","error","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","writeTokenToIndexedDB","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","transaction","store","objectStore","put","compositeKey","undefined","logger","Logger","readTokenFromStorage","isIndexedDBAvailable","warn","writeTokenToStorage","readOrCreateDebugTokenFromStorage","existingDebugToken","newToken","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","getGlobal","FIREBASE_APPCHECK_DEBUG_TOKEN","deferredToken","defaultTokenErrorData","formatDummyToken","tokenErrorData","base64","encodeString","getToken","appCheck","forceRefresh","cachedTokenPromise","cachedToken","isValid","shouldCallListeners","exchangeTokenPromise","then","tokenFromDebugExchange","Object","provider","code","interopTokenResult","makeDummyTokenResult","notifyTokenListeners","addTokenListener","type","listener","onError","tokenObserver","next","validToken","initTokenRefresher","removeTokenListener","newObservers","filter","length","tokenRefresher","isRunning","refresher","createTokenRefresher","isTokenAutoRefreshEnabled","start","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","observer","AppCheckService","factory","internalFactory","RECAPTCHA_URL","RECAPTCHA_ENTERPRISE_URL","initializeV3","siteKey","reCAPTCHAState","divId","makeDiv","loadReCAPTCHAV3Script","queueWidgetRender","initializeEnterprise","loadReCAPTCHAEnterpriseScript","container","ready","renderInvisibleWidget","invisibleDiv","document","createElement","id","style","display","appendChild","recaptcha","_reject","execute","widgetId","action","render","sitekey","size","onload","script","src","head","ReCaptchaV3Provider","_siteKey","throwIfThrottled","_throttleData","getReCAPTCHAToken","_app","attestedClaimsToken","_platformLoggerProvider","setBackoff","customData","time","allowRequestsAfter","_getProvider","initializeRecaptchaV3","otherProvider","ReCaptchaEnterpriseProvider","initializeRecaptchaEnterprise","CustomProvider","_customProviderOptions","customToken","issuedAtTimeSeconds","issuedAtTime","throttleData","backoffCount","backoffMillis","calculateBackoffMillis","initializeAppCheck","getApp","getModularInstance","console","log","isInitialized","existingInstance","initialOptions","getOptions","isEqual","initialize","_activate","newState","automaticDataCollectionEnabled","setTokenAutoRefreshEnabled","appCheckInstance","getTokenInternal","onTokenChanged","onNextOrObserver","onCompletion","nextFn","errorFn","bind","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","_registerComponent","Component","getProvider","setInstantiationMode","setInstanceCreatedCallback","_identifier","_appcheckService","registerVersion","version"],"sources":["../../src/state.ts","../../src/constants.ts","../../src/proactive-refresh.ts","../../src/errors.ts","../../src/util.ts","../../src/client.ts","../../src/indexeddb.ts","../../src/logger.ts","../../src/storage.ts","../../src/debug.ts","../../src/internal-api.ts","../../src/factory.ts","../../src/recaptcha.ts","../../src/providers.ts","../../src/api.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckProvider,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver\n} from './types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProvider;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  exchangeTokenPromise?: Promise<AppCheckTokenInternal>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  initialized: boolean;\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  initialized: false,\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n  DEBUG_STATE.initialized = false;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1beta';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nexport const EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD =\n  'exchangeRecaptchaEnterpriseToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n\n/**\n * One day in millis, for certain error code backoffs.\n */\nexport const ONE_DAY = 24 * 60 * 60 * 1000;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_INITIALIZED = 'already-initialized',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error',\n  THROTTLED = 'throttled'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_INITIALIZED]:\n    'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\n    'different options. To avoid this error, call initializeAppCheck() with the ' +\n    'same options as when it was originally called. This will return the ' +\n    'already initialized instance.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\n    'Call initializeAppCheck() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.',\n  [AppCheckError.THROTTLED]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_INITIALIZED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppCheckError.THROTTLED]: { time: string; httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getRecaptcha(\n  isEnterprise: boolean = false\n): GreCAPTCHA | undefined {\n  if (isEnterprise) {\n    return self.grecaptcha?.enterprise;\n  }\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport function getDurationString(durationInMillis: number): string {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor(\n    (totalSeconds - days * 3600 * 24 - hours * 3600) / 60\n  );\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n\n  let result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value: number): string {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  attestationToken: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaV3TokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeRecaptchaEnterpriseTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './types';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: e.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  ListenerType\n} from './types';\nimport { AppCheckTokenListener } from './public-types';\nimport { getState, setState } from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64, FirebaseError } from '@firebase/util';\nimport { logger } from './logger';\nimport { AppCheckService } from './factory';\nimport { AppCheckError } from './errors';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  appCheck: AppCheckService,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const state = getState(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If there is no token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n  let shouldCallListeners = false;\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      state.exchangeTokenPromise = exchangeToken(\n        getExchangeDebugTokenRequest(app, await getDebugToken()),\n        appCheck.platformLoggerProvider\n      ).then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n    const tokenFromDebugExchange: AppCheckTokenInternal =\n      await state.exchangeTokenPromise;\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, { ...state, token: tokenFromDebugExchange });\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider!.getToken().then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n    token = await state.exchangeTokenPromise;\n  } catch (e) {\n    if ((e as FirebaseError).code === `appCheck/${AppCheckError.THROTTLED}`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn((e as FirebaseError).message);\n    } else {\n      // `getToken()` should never throw, but logging error text to console will aid debugging.\n      logger.error(e);\n    }\n    // Always save error to be added to dummy token.\n    error = e as FirebaseError;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  appCheck: AppCheckService,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const { app } = appCheck;\n  const state = getState(app);\n  const tokenObserver: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  setState(app, {\n    ...state,\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  });\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => {\n        listener({ token: validToken.token });\n        initTokenRefresher(appCheck);\n      })\n      .catch(() => {\n        /* we don't care about exceptions thrown in listeners */\n      });\n  }\n\n  /**\n   * Wait for any cached token promise to resolve before starting the token\n   * refresher. The refresher checks to see if there is an existing token\n   * in state and calls the exchange endpoint if not. We should first let the\n   * IndexedDB check have a chance to populate state if it can.\n   *\n   * Listener call isn't needed here because cachedTokenPromise will call any\n   * listeners that exist when it resolves.\n   */\n\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise!.then(() => initTokenRefresher(appCheck));\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getState(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenObservers: newObservers\n  });\n}\n\n/**\n * Logic to create and start refresher as needed.\n */\nfunction initTokenRefresher(appCheck: AppCheckService): void {\n  const { app } = appCheck;\n  const state = getState(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  let refresher: Refresher | undefined = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    setState(app, { ...state, tokenRefresher: refresher });\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck: AppCheckService): Refresher {\n  const { app } = appCheck;\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(appCheck);\n      } else {\n        result = await getToken(appCheck, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nexport function notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheck } from './public-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { FirebaseAppCheckInternal, ListenerType } from './types';\nimport {\n  getToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { getState } from './state';\n\n/**\n * AppCheck Service class.\n */\nexport class AppCheckService implements AppCheck, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    public platformLoggerProvider: Provider<'platform-logger'>\n  ) {}\n  _delete(): Promise<void> {\n    const { tokenObservers } = getState(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): AppCheckService {\n  return new AppCheckService(app, platformLoggerProvider);\n}\n\nexport function internalFactory(\n  appCheck: AppCheckService\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh => getToken(appCheck, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(appCheck, ListenerType.INTERNAL, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nexport const RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js';\n\nexport function initializeV3(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nexport function initializeEnterprise(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n\n/**\n * Add listener to render the widget and resolve the promise when\n * the grecaptcha.ready() event fires.\n */\nfunction queueWidgetRender(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string,\n  initialized: Deferred<GreCAPTCHA>\n): void {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n\n/**\n * Add invisible div to page.\n */\nfunction makeDiv(app: FirebaseApp): string {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAV3Script(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHATopLevel | undefined;\n  }\n}\n\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport {\n  FirebaseError,\n  issuedAtTime,\n  calculateBackoffMillis\n} from '@firebase/util';\nimport {\n  exchangeToken,\n  getExchangeRecaptchaEnterpriseTokenRequest,\n  getExchangeRecaptchaV3TokenRequest\n} from './client';\nimport { ONE_DAY } from './constants';\nimport { AppCheckError, ERROR_FACTORY } from './errors';\nimport { CustomProviderOptions } from './public-types';\nimport {\n  getToken as getReCAPTCHAToken,\n  initializeV3 as initializeRecaptchaV3,\n  initializeEnterprise as initializeRecaptchaEnterprise\n} from './recaptcha';\nimport { AppCheckProvider, AppCheckTokenInternal, ThrottleData } from './types';\nimport { getDurationString } from './util';\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._platformLoggerProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaV3TokenRequest(this._app!, attestedClaimsToken),\n        this._platformLoggerProvider!\n      );\n    } catch (e) {\n      if ((e as FirebaseError).code === AppCheckError.FETCH_STATUS_ERROR) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initializeRecaptchaV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaEnterpriseProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaEnterpriseProvider instance.\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._platformLoggerProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaEnterpriseTokenRequest(\n          this._app!,\n          attestedClaimsToken\n        ),\n        this._platformLoggerProvider!\n      );\n    } catch (e) {\n      if ((e as FirebaseError).code === AppCheckError.FETCH_STATUS_ERROR) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initializeRecaptchaEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Custom provider class.\n * @public\n */\nexport class CustomProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof CustomProvider) {\n      return (\n        this._customProviderOptions.getToken.toString() ===\n        otherProvider._customProviderOptions.getToken.toString()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Set throttle data to block requests until after a certain time\n * depending on the failed request's status code.\n * @param httpStatus - Status code of failed request.\n * @param throttleData - `ThrottleData` object containing previous throttle\n * data state.\n * @returns Data about current throttle state and expiration time.\n */\nfunction setBackoff(\n  httpStatus: number,\n  throttleData: ThrottleData | null\n): ThrottleData {\n  /**\n   * Block retries for 1 day for the following error codes:\n   *\n   * 404: Likely malformed URL.\n   *\n   * 403:\n   * - Attestation failed\n   * - Wrong API key\n   * - Project deleted\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\n     * For all other error codes, the time when it is ok to retry again\n     * is based on exponential backoff.\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData: ThrottleData | null): void {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheck,\n  AppCheckOptions,\n  AppCheckTokenResult,\n  Unsubscribe,\n  PartialObserver\n} from './public-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { getState, setState, AppCheckState, getDebugState } from './state';\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { getModularInstance, ErrorFn, NextFn } from '@firebase/util';\nimport { AppCheckService } from './factory';\nimport { AppCheckProvider, ListenerType } from './types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid,\n  notifyTokenListeners\n} from './internal-api';\nimport { readTokenFromStorage } from './storage';\nimport { getDebugToken, initializeDebugMode, isDebugMode } from './debug';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'app-check': AppCheckService;\n  }\n}\n\nexport {\n  ReCaptchaV3Provider,\n  CustomProvider,\n  ReCaptchaEnterpriseProvider\n} from './providers';\n\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nexport function initializeAppCheck(\n  app: FirebaseApp = getApp(),\n  options: AppCheckOptions\n): AppCheck {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n      // Not using logger because I don't think we ever want this accidentally hidden.\n      console.log(\n        `App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`\n      )\n    );\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions() as unknown as AppCheckOptions;\n    if (\n      initialOptions.isTokenAutoRefreshEnabled ===\n        options.isTokenAutoRefreshEnabled &&\n      initialOptions.provider.isEqual(options.provider)\n    ) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AppCheckError.ALREADY_INITIALIZED, {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({ options });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getState(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, ListenerType.INTERNAL, () => {});\n  }\n\n  return appCheck;\n}\n\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(\n  app: FirebaseApp,\n  provider: AppCheckProvider,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n\n  const newState: AppCheckState = { ...state, activated: true };\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, { ...getState(app), token: cachedToken });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: cachedToken.token });\n    }\n    return cachedToken;\n  });\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  newState.provider.initialize(app);\n}\n\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nexport function setTokenAutoRefreshEnabled(\n  appCheckInstance: AppCheck,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const app = appCheckInstance.app;\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n/**\n * Get the current App Check token. Attaches to the most recent\n * in-flight request if one is present. Returns null if no token\n * is present and no token requests are in-flight.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nexport async function getToken(\n  appCheckInstance: AppCheck,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    appCheckInstance as AppCheckService,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param observer - An object with `next`, `error`, and `complete`\n * properties. `next` is called with an\n * {@link AppCheckTokenResult}\n * whenever the token changes. `error` is optional and is called if an\n * error is thrown by the listener (the `next` function). `complete`\n * is unused, as the token stream is unending.\n *\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param onNext - When the token changes, this function is called with aa\n * {@link AppCheckTokenResult}.\n * @param onError - Optional. Called if there is an error thrown by the\n * listener (the `onNext` function).\n * @param onCompletion - Currently unused, as the token stream is unending.\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    appCheckInstance as AppCheckService,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n","/**\n * Firebase App Check\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { _AppCheckComponentName } from './public-types';\nimport { factory, internalFactory } from './factory';\nimport { _AppCheckInternalComponentName } from './types';\nimport { name, version } from '../package.json';\n\n// Used by other Firebase packages.\nexport { _AppCheckInternalComponentName };\n\nexport * from './api';\nexport * from './public-types';\n\nconst APP_CHECK_NAME: _AppCheckComponentName = 'app-check';\nconst APP_CHECK_NAME_INTERNAL: _AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(): void {\n  // The public interface\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return factory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n       * other Firebase SDKs\n       */\n      .setInstanceCreatedCallback(\n        (container, _identifier, _appcheckService) => {\n          container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        const appCheck = container.getProvider('app-check').getImmediate();\n        return internalFactory(appCheck);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\n"]},"metadata":{},"sourceType":"module"}