{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { ReCaptchaV3Provider, ReCaptchaEnterpriseProvider, CustomProvider, initializeAppCheck, setTokenAutoRefreshEnabled, getToken, onTokenChanged } from '@firebase/app-check';\nimport { ErrorFactory } from '@firebase/util';\nconst name = \"@firebase/app-check-compat\";\nconst version = \"0.2.3\";\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERRORS = {\n  [\"use-before-activation\"\n  /* USE_BEFORE_ACTIVATION */\n  ]: 'App Check is being used before activate() is called for FirebaseApp {$appName}. ' + 'Call activate() before instantiating other Firebase services.'\n};\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass AppCheckService {\n  constructor(app) {\n    this.app = app;\n  }\n\n  activate(siteKeyOrProvider, isTokenAutoRefreshEnabled) {\n    let provider;\n\n    if (typeof siteKeyOrProvider === 'string') {\n      provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n    } else if (siteKeyOrProvider instanceof ReCaptchaEnterpriseProvider || siteKeyOrProvider instanceof ReCaptchaV3Provider || siteKeyOrProvider instanceof CustomProvider) {\n      provider = siteKeyOrProvider;\n    } else {\n      provider = new CustomProvider({\n        getToken: siteKeyOrProvider.getToken\n      });\n    }\n\n    this._delegate = initializeAppCheck(this.app, {\n      provider,\n      isTokenAutoRefreshEnabled\n    });\n  }\n\n  setTokenAutoRefreshEnabled(isTokenAutoRefreshEnabled) {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(\"use-before-activation\"\n      /* USE_BEFORE_ACTIVATION */\n      , {\n        appName: this.app.name\n      });\n    }\n\n    setTokenAutoRefreshEnabled(this._delegate, isTokenAutoRefreshEnabled);\n  }\n\n  getToken(forceRefresh) {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(\"use-before-activation\"\n      /* USE_BEFORE_ACTIVATION */\n      , {\n        appName: this.app.name\n      });\n    }\n\n    return getToken(this._delegate, forceRefresh);\n  }\n\n  onTokenChanged(onNextOrObserver, onError, onCompletion) {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(\"use-before-activation\"\n      /* USE_BEFORE_ACTIVATION */\n      , {\n        appName: this.app.name\n      });\n    }\n\n    return onTokenChanged(this._delegate,\n    /**\r\n     * Exp onTokenChanged() will handle both overloads but we need\r\n     * to specify one to not confuse Typescript.\r\n     */\n    onNextOrObserver, onError, onCompletion);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst factory = container => {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  return new AppCheckService(app);\n};\n\nfunction registerAppCheck() {\n  firebase.INTERNAL.registerComponent(new Component('appCheck-compat', factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    ReCaptchaEnterpriseProvider,\n    ReCaptchaV3Provider,\n    CustomProvider\n  }));\n}\n\nregisterAppCheck();\nfirebase.registerVersion(name, version);\nexport { registerAppCheck };","map":{"version":3,"sources":["/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@firebase/app-check-compat/dist/esm/index.esm2017.js"],"names":["firebase","Component","ReCaptchaV3Provider","ReCaptchaEnterpriseProvider","CustomProvider","initializeAppCheck","setTokenAutoRefreshEnabled","getToken","onTokenChanged","ErrorFactory","name","version","ERRORS","ERROR_FACTORY","AppCheckService","constructor","app","activate","siteKeyOrProvider","isTokenAutoRefreshEnabled","provider","_delegate","create","appName","forceRefresh","onNextOrObserver","onError","onCompletion","factory","container","getProvider","getImmediate","registerAppCheck","INTERNAL","registerComponent","setServiceProps","registerVersion"],"mappings":"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","sourcesContent":["import firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { ReCaptchaV3Provider, ReCaptchaEnterpriseProvider, CustomProvider, initializeAppCheck, setTokenAutoRefreshEnabled, getToken, onTokenChanged } from '@firebase/app-check';\nimport { ErrorFactory } from '@firebase/util';\n\nconst name = \"@firebase/app-check-compat\";\nconst version = \"0.2.3\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"use-before-activation\" /* USE_BEFORE_ACTIVATION */]: 'App Check is being used before activate() is called for FirebaseApp {$appName}. ' +\r\n        'Call activate() before instantiating other Firebase services.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AppCheckService {\r\n    constructor(app) {\r\n        this.app = app;\r\n    }\r\n    activate(siteKeyOrProvider, isTokenAutoRefreshEnabled) {\r\n        let provider;\r\n        if (typeof siteKeyOrProvider === 'string') {\r\n            provider = new ReCaptchaV3Provider(siteKeyOrProvider);\r\n        }\r\n        else if (siteKeyOrProvider instanceof ReCaptchaEnterpriseProvider ||\r\n            siteKeyOrProvider instanceof ReCaptchaV3Provider ||\r\n            siteKeyOrProvider instanceof CustomProvider) {\r\n            provider = siteKeyOrProvider;\r\n        }\r\n        else {\r\n            provider = new CustomProvider({ getToken: siteKeyOrProvider.getToken });\r\n        }\r\n        this._delegate = initializeAppCheck(this.app, {\r\n            provider,\r\n            isTokenAutoRefreshEnabled\r\n        });\r\n    }\r\n    setTokenAutoRefreshEnabled(isTokenAutoRefreshEnabled) {\r\n        if (!this._delegate) {\r\n            throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\r\n                appName: this.app.name\r\n            });\r\n        }\r\n        setTokenAutoRefreshEnabled(this._delegate, isTokenAutoRefreshEnabled);\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this._delegate) {\r\n            throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\r\n                appName: this.app.name\r\n            });\r\n        }\r\n        return getToken(this._delegate, forceRefresh);\r\n    }\r\n    onTokenChanged(onNextOrObserver, onError, onCompletion) {\r\n        if (!this._delegate) {\r\n            throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\r\n                appName: this.app.name\r\n            });\r\n        }\r\n        return onTokenChanged(this._delegate, \r\n        /**\r\n         * Exp onTokenChanged() will handle both overloads but we need\r\n         * to specify one to not confuse Typescript.\r\n         */\r\n        onNextOrObserver, onError, onCompletion);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst factory = (container) => {\r\n    // Dependencies\r\n    const app = container.getProvider('app-compat').getImmediate();\r\n    return new AppCheckService(app);\r\n};\r\nfunction registerAppCheck() {\r\n    firebase.INTERNAL.registerComponent(new Component('appCheck-compat', factory, \"PUBLIC\" /* PUBLIC */).setServiceProps({\r\n        ReCaptchaEnterpriseProvider,\r\n        ReCaptchaV3Provider,\r\n        CustomProvider\r\n    }));\r\n}\r\nregisterAppCheck();\r\nfirebase.registerVersion(name, version);\n\nexport { registerAppCheck };\n//# sourceMappingURL=index.esm2017.js.map\n"]},"metadata":{},"sourceType":"module"}