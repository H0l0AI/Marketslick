{"ast":null,"code":"import _initializerDefineProperty from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;\n\nimport { action, autorun, observable, toJS } from 'mobx';\nimport { persist } from \"mobx-persist\";\nimport cookie from 'js-cookie';\nimport { createWebsite, signUpUsingSocial, signUpUsingEmail, signUpUsingFacebook, handleSignOut, initializeAuthentication, getTemplatesWithId, autoCompletePlacesAction, getRelevantBusinessInfo } from \"./PageService\";\nlet PageStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, _dec4 = action.bound, _dec5 = action.bound, (_class = class PageStore {\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"value\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"autoCompletePlaces\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"user\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"activeTemplate\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"userId\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"userEmail\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"code\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"isPotentialCustomer\", _descriptor8, this);\n\n    this.rootStore = rootStore;\n    this.createWebsite = createWebsite;\n    this.signUpUsingGoogle = signUpUsingSocial;\n    this.signOut = handleSignOut;\n    this.initializeAuthentication = initializeAuthentication;\n    this.getTemplatesWithId = getTemplatesWithId;\n    this.autoCompletePlacesAction = autoCompletePlacesAction;\n    this.getRelevantBusinessInfo = getRelevantBusinessInfo;\n    this.signUpUsingFacebook = signUpUsingFacebook;\n  }\n\n  setCode(codeToSet) {\n    console.log('set:', codeToSet);\n    cookie.set('code', codeToSet);\n    this.code = codeToSet;\n  }\n\n  setUser(user) {\n    if (user) {\n      console.log(user, '...');\n      console.log('....', '...', user.email);\n      this.userId = user.uid;\n      this.userEmail = user.email;\n    }\n  }\n\n  setIsPotentialCustomer(isPotentialCustomer) {\n    cookie.set('isPotentialCustomer', isPotentialCustomer);\n    this.isPotentialCustomer = isPotentialCustomer;\n  }\n\n  setActiveTemplate(templateContent) {\n    this.activeTemplate = templateContent;\n  }\n\n  setAutoCompletePlaces(data) {\n    console.log('PLACES:', data);\n\n    if (data && data.predictions) {\n      this.autoCompletePlaces = data.predictions;\n    }\n\n    return data;\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"value\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"autoCompletePlaces\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"user\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"activeTemplate\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"userId\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"userEmail\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"code\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return cookie.get('code');\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setCode\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"setCode\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setUser\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"setUser\"), _class.prototype), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"isPotentialCustomer\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setIsPotentialCustomer\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \"setIsPotentialCustomer\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setActiveTemplate\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \"setActiveTemplate\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setAutoCompletePlaces\", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, \"setAutoCompletePlaces\"), _class.prototype)), _class));\nexport { PageStore as default };","map":{"version":3,"sources":["/Users/aider/WebstormProjects/Marketslick/Marketslick/src/stores/pageStore.js"],"names":["action","autorun","observable","toJS","persist","cookie","createWebsite","signUpUsingSocial","signUpUsingEmail","signUpUsingFacebook","handleSignOut","initializeAuthentication","getTemplatesWithId","autoCompletePlacesAction","getRelevantBusinessInfo","PageStore","bound","constructor","rootStore","signUpUsingGoogle","signOut","setCode","codeToSet","console","log","set","code","setUser","user","email","userId","uid","userEmail","setIsPotentialCustomer","isPotentialCustomer","setActiveTemplate","templateContent","activeTemplate","setAutoCompletePlaces","data","predictions","autoCompletePlaces","get"],"mappings":";;;;;;AAAA,SACIA,MADJ,EACYC,OADZ,EACqBC,UADrB,EACiCC,IADjC,QAEO,MAFP;AAGA,SAAQC,OAAR,QAAsB,cAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAAQC,aAAR,EAAsBC,iBAAtB,EAAwCC,gBAAxC,EAAyDC,mBAAzD,EAA6EC,aAA7E,EAA2FC,wBAA3F,EAAoHC,kBAApH,EAAuIC,wBAAvI,EAAgKC,uBAAhK,QAA8L,eAA9L;IAEqBC,S,WAqBhBf,MAAM,CAACgB,K,UAKPhB,MAAM,CAACgB,K,UASPhB,MAAM,CAACgB,K,UAIPhB,MAAM,CAACgB,K,UAGPhB,MAAM,CAACgB,K,YA1CG,MAAMD,SAAN,CAAgB;AAE3BE,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKZ,aAAL,GAAqBA,aAArB;AACA,SAAKa,iBAAL,GAAuBZ,iBAAvB;AACA,SAAKa,OAAL,GAAaV,aAAb;AACA,SAAKC,wBAAL,GAA8BA,wBAA9B;AACA,SAAKC,kBAAL,GAAwBA,kBAAxB;AACA,SAAKC,wBAAL,GAA8BA,wBAA9B;AACA,SAAKC,uBAAL,GAA6BA,uBAA7B;AACA,SAAKL,mBAAL,GAAyBA,mBAAzB;AACH;;AASaY,EAAAA,OAAO,CAACC,SAAD,EAAW;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBF,SAAnB;AACAjB,IAAAA,MAAM,CAACoB,GAAP,CAAW,MAAX,EAAkBH,SAAlB;AACA,SAAKI,IAAL,GAAUJ,SAAV;AACH;;AACaK,EAAAA,OAAO,CAACC,IAAD,EAAM;AACvB,QAAGA,IAAH,EAAS;AACLL,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ,EAAkB,KAAlB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAApB,EAA2BI,IAAI,CAACC,KAAhC;AACA,WAAKC,MAAL,GAAcF,IAAI,CAACG,GAAnB;AACA,WAAKC,SAAL,GAAiBJ,IAAI,CAACC,KAAtB;AACH;AACJ;;AAEaI,EAAAA,sBAAsB,CAACC,mBAAD,EAAqB;AACrD7B,IAAAA,MAAM,CAACoB,GAAP,CAAW,qBAAX,EAAiCS,mBAAjC;AACA,SAAKA,mBAAL,GAA2BA,mBAA3B;AACH;;AACaC,EAAAA,iBAAiB,CAACC,eAAD,EAAiB;AAC5C,SAAKC,cAAL,GAAsBD,eAAtB;AACH;;AACaE,EAAAA,qBAAqB,CAACC,IAAD,EAAM;AACrChB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBe,IAAtB;;AACI,QAAIA,IAAI,IAAIA,IAAI,CAACC,WAAjB,EAA8B;AAC1B,WAAKC,kBAAL,GAA0BF,IAAI,CAACC,WAA/B;AACH;;AACD,WAAOD,IAAP;AAEP;;AAjD0B,C,uEAc1BrC,U;;;;;WAAmB,E;;sFACnBA,U;;;;;WAAgC,E;;wEAChCE,O,EAASF,U;;;;;WAAkB,E;;kFAC3BE,O,EAASF,U;;;;;WAA4B,E;;0EACrCE,O,EAASF,U;;;;;WAAoB,E;;6EAC7BE,O,EAASF,U;;;;;WAAuB,E;;wEAChCE,O,EAASF,U;;;;;WAAkBG,MAAM,CAACqC,GAAP,CAAW,MAAX,C;;wXAc3BtC,O,EAASF,U;;;;;WAAiC,K;;;SAlC1Ba,S","sourcesContent":["import {\n    action, autorun, observable, toJS,\n} from 'mobx';\nimport {persist} from \"mobx-persist\";\nimport cookie from 'js-cookie';\nimport {createWebsite,signUpUsingSocial,signUpUsingEmail,signUpUsingFacebook,handleSignOut,initializeAuthentication,getTemplatesWithId,autoCompletePlacesAction,getRelevantBusinessInfo} from \"./PageService\";\n\nexport default class PageStore {\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.createWebsite = createWebsite;\n        this.signUpUsingGoogle=signUpUsingSocial;\n        this.signOut=handleSignOut;\n        this.initializeAuthentication=initializeAuthentication;\n        this.getTemplatesWithId=getTemplatesWithId;\n        this.autoCompletePlacesAction=autoCompletePlacesAction;\n        this.getRelevantBusinessInfo=getRelevantBusinessInfo;\n        this.signUpUsingFacebook=signUpUsingFacebook;\n    }\n\n    @observable value = '';\n    @observable autoCompletePlaces = [];\n    @persist @observable user = {};\n    @persist @observable activeTemplate = {};\n    @persist @observable userId = '';\n    @persist @observable userEmail = '';\n    @persist @observable code = cookie.get('code');\n    @action.bound setCode(codeToSet){\n        console.log('set:',codeToSet);\n        cookie.set('code',codeToSet);\n        this.code=codeToSet\n    }\n    @action.bound setUser(user){\n        if(user) {\n            console.log(user, '...');\n            console.log('....', '...', user.email);\n            this.userId = user.uid;\n            this.userEmail = user.email;\n        }\n    }\n    @persist @observable isPotentialCustomer = false;\n    @action.bound setIsPotentialCustomer(isPotentialCustomer){\n        cookie.set('isPotentialCustomer',isPotentialCustomer);\n        this.isPotentialCustomer = isPotentialCustomer;\n    }\n    @action.bound setActiveTemplate(templateContent){\n        this.activeTemplate = templateContent;\n    }\n    @action.bound setAutoCompletePlaces(data){\n        console.log('PLACES:',data);\n            if (data && data.predictions) {\n                this.autoCompletePlaces = data.predictions;\n            }\n            return data;\n\n    }\n}"]},"metadata":{},"sourceType":"module"}