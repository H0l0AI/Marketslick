{"ast":null,"code":"import _slicedToArray from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar _ERROR_DESCRIPTION_MA;\n\nimport _regeneratorRuntime from \"/Users/aider/WebstormProjects/Marketslick/Marketslick/node_modules/@babel/runtime/regenerator/index.js\";\nimport { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { ErrorFactory, FirebaseError, getModularInstance, calculateBackoffMillis, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport '@firebase/installations';\nvar name = \"@firebase/remote-config\";\nvar version = \"0.3.4\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\n\nvar RemoteConfigAbortSignal = /*#__PURE__*/function () {\n  function RemoteConfigAbortSignal() {\n    _classCallCheck(this, RemoteConfigAbortSignal);\n\n    this.listeners = [];\n  }\n\n  _createClass(RemoteConfigAbortSignal, [{\n    key: \"addEventListener\",\n    value: function addEventListener(listener) {\n      this.listeners.push(listener);\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.listeners.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }]);\n\n  return RemoteConfigAbortSignal;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RC_COMPONENT_NAME = 'remote-config';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ERROR_DESCRIPTION_MAP = (_ERROR_DESCRIPTION_MA = {}, _defineProperty(_ERROR_DESCRIPTION_MA, \"registration-window\"\n/* REGISTRATION_WINDOW */\n, 'Undefined window object. This SDK only supports usage in a browser environment.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"registration-project-id\"\n/* REGISTRATION_PROJECT_ID */\n, 'Undefined project identifier. Check Firebase app initialization.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"registration-api-key\"\n/* REGISTRATION_API_KEY */\n, 'Undefined API key. Check Firebase app initialization.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"registration-app-id\"\n/* REGISTRATION_APP_ID */\n, 'Undefined app identifier. Check Firebase app initialization.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"storage-open\"\n/* STORAGE_OPEN */\n, 'Error thrown when opening storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"storage-get\"\n/* STORAGE_GET */\n, 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"storage-set\"\n/* STORAGE_SET */\n, 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"storage-delete\"\n/* STORAGE_DELETE */\n, 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"fetch-client-network\"\n/* FETCH_NETWORK */\n, 'Fetch client failed to connect to a network. Check Internet connection.' + ' Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"fetch-timeout\"\n/* FETCH_TIMEOUT */\n, 'The config fetch request timed out. ' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"fetch-throttle\"\n/* FETCH_THROTTLE */\n, 'The config fetch request timed out while in an exponential backoff state.' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"fetch-client-parse\"\n/* FETCH_PARSE */\n, 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"fetch-status\"\n/* FETCH_STATUS */\n, 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"indexed-db-unavailable\"\n/* INDEXED_DB_UNAVAILABLE */\n, 'Indexed DB is not supported by current browser'), _ERROR_DESCRIPTION_MA);\nvar ERROR_FACTORY = new ErrorFactory('remoteconfig'\n/* service */\n, 'Remote Config'\n/* service name */\n, ERROR_DESCRIPTION_MAP); // Note how this is like typeof/instanceof, but for ErrorCode.\n\nfunction hasErrorCode(e, errorCode) {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_VALUE_FOR_BOOLEAN = false;\nvar DEFAULT_VALUE_FOR_STRING = '';\nvar DEFAULT_VALUE_FOR_NUMBER = 0;\nvar BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nvar Value = /*#__PURE__*/function () {\n  function Value(_source) {\n    var _value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_VALUE_FOR_STRING;\n\n    _classCallCheck(this, Value);\n\n    this._source = _source;\n    this._value = _value;\n  }\n\n  _createClass(Value, [{\n    key: \"asString\",\n    value: function asString() {\n      return this._value;\n    }\n  }, {\n    key: \"asBoolean\",\n    value: function asBoolean() {\n      if (this._source === 'static') {\n        return DEFAULT_VALUE_FOR_BOOLEAN;\n      }\n\n      return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n    }\n  }, {\n    key: \"asNumber\",\n    value: function asNumber() {\n      if (this._source === 'static') {\n        return DEFAULT_VALUE_FOR_NUMBER;\n      }\n\n      var num = Number(this._value);\n\n      if (isNaN(num)) {\n        num = DEFAULT_VALUE_FOR_NUMBER;\n      }\n\n      return num;\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource() {\n      return this._source;\n    }\n  }]);\n\n  return Value;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n * @returns A {@link RemoteConfig} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getRemoteConfig() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  app = getModularInstance(app);\n\n  var rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n\n  return rcProvider.getImmediate();\n}\n/**\r\n * Makes the last fetched config available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\n\n\nfunction activate(_x) {\n  return _activate.apply(this, arguments);\n}\n/**\r\n * Ensures the last activated config are available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\r\n * @public\r\n */\n\n\nfunction _activate() {\n  _activate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(remoteConfig) {\n    var rc, _yield$Promise$all5, _yield$Promise$all6, lastSuccessfulFetchResponse, activeConfigEtag;\n\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            rc = getModularInstance(remoteConfig);\n            _context9.next = 3;\n            return Promise.all([rc._storage.getLastSuccessfulFetchResponse(), rc._storage.getActiveConfigEtag()]);\n\n          case 3:\n            _yield$Promise$all5 = _context9.sent;\n            _yield$Promise$all6 = _slicedToArray(_yield$Promise$all5, 2);\n            lastSuccessfulFetchResponse = _yield$Promise$all6[0];\n            activeConfigEtag = _yield$Promise$all6[1];\n\n            if (!(!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag)) {\n              _context9.next = 9;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", false);\n\n          case 9:\n            _context9.next = 11;\n            return Promise.all([rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config), rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)]);\n\n          case 11:\n            return _context9.abrupt(\"return\", true);\n\n          case 12:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _activate.apply(this, arguments);\n}\n\nfunction ensureInitialized(remoteConfig) {\n  var rc = getModularInstance(remoteConfig);\n\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(function () {\n      rc._isInitializationComplete = true;\n    });\n  }\n\n  return rc._initializePromise;\n}\n/**\r\n * Fetches and caches configuration from the Remote Config service.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @public\r\n */\n\n\nfunction fetchConfig(_x2) {\n  return _fetchConfig.apply(this, arguments);\n}\n/**\r\n * Gets all config.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns All config.\r\n *\r\n * @public\r\n */\n\n\nfunction _fetchConfig() {\n  _fetchConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(remoteConfig) {\n    var rc, abortSignal, lastFetchStatus;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            rc = getModularInstance(remoteConfig); // Aborts the request after the given timeout, causing the fetch call to\n            // reject with an `AbortError`.\n            //\n            // <p>Aborting after the request completes is a no-op, so we don't need a\n            // corresponding `clearTimeout`.\n            //\n            // Locating abort logic here because:\n            // * it uses a developer setting (timeout)\n            // * it applies to all retries (like curl's max-time arg)\n            // * it is consistent with the Fetch API's signal input\n\n            abortSignal = new RemoteConfigAbortSignal();\n            setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n              return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n                while (1) {\n                  switch (_context10.prev = _context10.next) {\n                    case 0:\n                      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n                      abortSignal.abort();\n\n                    case 1:\n                    case \"end\":\n                      return _context10.stop();\n                  }\n                }\n              }, _callee10);\n            })), rc.settings.fetchTimeoutMillis); // Catches *all* errors thrown by client so status can be set consistently.\n\n            _context11.prev = 3;\n            _context11.next = 6;\n            return rc._client.fetch({\n              cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n              signal: abortSignal\n            });\n\n          case 6:\n            _context11.next = 8;\n            return rc._storageCache.setLastFetchStatus('success');\n\n          case 8:\n            _context11.next = 16;\n            break;\n\n          case 10:\n            _context11.prev = 10;\n            _context11.t0 = _context11[\"catch\"](3);\n            lastFetchStatus = hasErrorCode(_context11.t0, \"fetch-throttle\"\n            /* FETCH_THROTTLE */\n            ) ? 'throttle' : 'failure';\n            _context11.next = 15;\n            return rc._storageCache.setLastFetchStatus(lastFetchStatus);\n\n          case 15:\n            throw _context11.t0;\n\n          case 16:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11, null, [[3, 10]]);\n  }));\n  return _fetchConfig.apply(this, arguments);\n}\n\nfunction getAll(remoteConfig) {\n  var rc = getModularInstance(remoteConfig);\n  return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce(function (allConfigs, key) {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {});\n}\n/**\r\n * Gets the value for the given key as a boolean.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a boolean.\r\n * @public\r\n */\n\n\nfunction getBoolean(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n/**\r\n * Gets the value for the given key as a number.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a number.\r\n *\r\n * @public\r\n */\n\n\nfunction getNumber(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n/**\r\n * Gets the value for the given key as a string.\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a string.\r\n *\r\n * @public\r\n */\n\n\nfunction getString(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n/**\r\n * Gets the {@link Value} for the given key.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key.\r\n *\r\n * @public\r\n */\n\n\nfunction getValue(remoteConfig, key) {\n  var rc = getModularInstance(remoteConfig);\n\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(\"A value was requested for key \\\"\".concat(key, \"\\\" before SDK initialization completed.\") + ' Await on ensureInitialized if the intent was to get a previously activated value.');\n  }\n\n  var activeConfig = rc._storageCache.getActiveConfig();\n\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new Value('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new Value('default', String(rc.defaultConfig[key]));\n  }\n\n  rc._logger.debug(\"Returning static value for key \\\"\".concat(key, \"\\\".\") + ' Define a default or remote value if this is unintentional.');\n\n  return new Value('static');\n}\n/**\r\n * Defines the log level to use.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param logLevel - The log level to set.\r\n *\r\n * @public\r\n */\n\n\nfunction setLogLevel(remoteConfig, logLevel) {\n  var rc = getModularInstance(remoteConfig);\n\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = LogLevel.DEBUG;\n      break;\n\n    case 'silent':\n      rc._logger.logLevel = LogLevel.SILENT;\n      break;\n\n    default:\n      rc._logger.logLevel = LogLevel.ERROR;\n  }\n}\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\n\n\nfunction getAllKeys() {\n  var obj1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var obj2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.keys(Object.assign(Object.assign({}, obj1), obj2));\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\n\n\nvar CachingClient = /*#__PURE__*/function () {\n  function CachingClient(client, storage, storageCache, logger) {\n    _classCallCheck(this, CachingClient);\n\n    this.client = client;\n    this.storage = storage;\n    this.storageCache = storageCache;\n    this.logger = logger;\n  }\n  /**\r\n   * Returns true if the age of the cached fetched configs is less than or equal to\r\n   * {@link Settings#minimumFetchIntervalInSeconds}.\r\n   *\r\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n   * native Fetch API.\r\n   *\r\n   * <p>Visible for testing.\r\n   */\n\n\n  _createClass(CachingClient, [{\n    key: \"isCachedDataFresh\",\n    value: function isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\n      // Cache can only be fresh if it's populated.\n      if (!lastSuccessfulFetchTimestampMillis) {\n        this.logger.debug('Config fetch cache check. Cache unpopulated.');\n        return false;\n      } // Calculates age of cache entry.\n\n\n      var cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n      var isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n      this.logger.debug('Config fetch cache check.' + \" Cache age millis: \".concat(cacheAgeMillis, \".\") + \" Cache max age millis (minimumFetchIntervalMillis setting): \".concat(cacheMaxAgeMillis, \".\") + \" Is cache hit: \".concat(isCachedDataFresh, \".\"));\n      return isCachedDataFresh;\n    }\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request) {\n        var _yield$Promise$all, _yield$Promise$all2, lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse, response, storageOperations;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.all([this.storage.getLastSuccessfulFetchTimestampMillis(), this.storage.getLastSuccessfulFetchResponse()]);\n\n              case 2:\n                _yield$Promise$all = _context.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                lastSuccessfulFetchTimestampMillis = _yield$Promise$all2[0];\n                lastSuccessfulFetchResponse = _yield$Promise$all2[1];\n\n                if (!(lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis))) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", lastSuccessfulFetchResponse);\n\n              case 8:\n                // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n                // that allows the caller to pass an ETag.\n                request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag; // Falls back to service on cache miss.\n\n                _context.next = 11;\n                return this.client.fetch(request);\n\n              case 11:\n                response = _context.sent;\n                // Fetch throws for non-success responses, so success is guaranteed here.\n                storageOperations = [// Uses write-through cache for consistency with synchronous public API.\n                this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())];\n\n                if (response.status === 200) {\n                  // Caches response only if it has changed, ie non-304 responses.\n                  storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\n                }\n\n                _context.next = 16;\n                return Promise.all(storageOperations);\n\n              case 16:\n                return _context.abrupt(\"return\", response);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch(_x3) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }]);\n\n  return CachingClient;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\n\n\nfunction getUserLanguage() {\n  var navigatorLanguage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : navigator;\n  return (// Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language // Polyfill otherwise.\n\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\n\n\nvar RestClient = /*#__PURE__*/function () {\n  function RestClient(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\n    _classCallCheck(this, RestClient);\n\n    this.firebaseInstallations = firebaseInstallations;\n    this.sdkVersion = sdkVersion;\n    this.namespace = namespace;\n    this.projectId = projectId;\n    this.apiKey = apiKey;\n    this.appId = appId;\n  }\n  /**\r\n   * Fetches from the Remote Config REST API.\r\n   *\r\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n   * connect to the network.\r\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n   * fetch response.\r\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n   */\n\n\n  _createClass(RestClient, [{\n    key: \"fetch\",\n    value: function (_fetch2) {\n      function fetch(_x4) {\n        return _fetch2.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch2.toString();\n      };\n\n      return fetch;\n    }(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request) {\n        var _yield$Promise$all3, _yield$Promise$all4, installationId, installationToken, urlBase, url, headers, requestBody, options, fetchPromise, timeoutPromise, response, errorCode, status, responseEtag, config, state, responseBody;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Promise.all([this.firebaseInstallations.getId(), this.firebaseInstallations.getToken()]);\n\n              case 2:\n                _yield$Promise$all3 = _context2.sent;\n                _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);\n                installationId = _yield$Promise$all4[0];\n                installationToken = _yield$Promise$all4[1];\n                urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\n                url = \"\".concat(urlBase, \"/v1/projects/\").concat(this.projectId, \"/namespaces/\").concat(this.namespace, \":fetch?key=\").concat(this.apiKey);\n                headers = {\n                  'Content-Type': 'application/json',\n                  'Content-Encoding': 'gzip',\n                  // Deviates from pure decorator by not passing max-age header since we don't currently have\n                  // service behavior using that header.\n                  'If-None-Match': request.eTag || '*'\n                };\n                requestBody = {\n                  /* eslint-disable camelcase */\n                  sdk_version: this.sdkVersion,\n                  app_instance_id: installationId,\n                  app_instance_id_token: installationToken,\n                  app_id: this.appId,\n                  language_code: getUserLanguage()\n                  /* eslint-enable camelcase */\n\n                };\n                options = {\n                  method: 'POST',\n                  headers: headers,\n                  body: JSON.stringify(requestBody)\n                }; // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n\n                fetchPromise = fetch(url, options);\n                timeoutPromise = new Promise(function (_resolve, reject) {\n                  // Maps async event listener to Promise API.\n                  request.signal.addEventListener(function () {\n                    // Emulates https://heycam.github.io/webidl/#aborterror\n                    var error = new Error('The operation was aborted.');\n                    error.name = 'AbortError';\n                    reject(error);\n                  });\n                });\n                _context2.prev = 13;\n                _context2.next = 16;\n                return Promise.race([fetchPromise, timeoutPromise]);\n\n              case 16:\n                _context2.next = 18;\n                return fetchPromise;\n\n              case 18:\n                response = _context2.sent;\n                _context2.next = 26;\n                break;\n\n              case 21:\n                _context2.prev = 21;\n                _context2.t0 = _context2[\"catch\"](13);\n                errorCode = \"fetch-client-network\";\n\n                if (_context2.t0.name === 'AbortError') {\n                  errorCode = \"fetch-timeout\"\n                  /* FETCH_TIMEOUT */\n                  ;\n                }\n\n                throw ERROR_FACTORY.create(errorCode, {\n                  originalErrorMessage: _context2.t0.message\n                });\n\n              case 26:\n                status = response.status; // Normalizes nullable header to optional.\n\n                responseEtag = response.headers.get('ETag') || undefined;\n\n                if (!(response.status === 200)) {\n                  _context2.next = 40;\n                  break;\n                }\n\n                _context2.prev = 29;\n                _context2.next = 32;\n                return response.json();\n\n              case 32:\n                responseBody = _context2.sent;\n                _context2.next = 38;\n                break;\n\n              case 35:\n                _context2.prev = 35;\n                _context2.t1 = _context2[\"catch\"](29);\n                throw ERROR_FACTORY.create(\"fetch-client-parse\"\n                /* FETCH_PARSE */\n                , {\n                  originalErrorMessage: _context2.t1.message\n                });\n\n              case 38:\n                config = responseBody['entries'];\n                state = responseBody['state'];\n\n              case 40:\n                // Normalizes based on legacy state.\n                if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n                  status = 500;\n                } else if (state === 'NO_CHANGE') {\n                  status = 304;\n                } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n                  // These cases can be fixed remotely, so normalize to safe value.\n                  config = {};\n                } // Normalize to exception-based control flow for non-success cases.\n                // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n                // differentiating success states (200 from 304; the state body param is undefined in a\n                // standard 304).\n\n\n                if (!(status !== 304 && status !== 200)) {\n                  _context2.next = 43;\n                  break;\n                }\n\n                throw ERROR_FACTORY.create(\"fetch-status\"\n                /* FETCH_STATUS */\n                , {\n                  httpStatus: status\n                });\n\n              case 43:\n                return _context2.abrupt(\"return\", {\n                  status: status,\n                  eTag: responseEtag,\n                  config: config\n                });\n\n              case 44:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[13, 21], [29, 35]]);\n      }));\n\n      return function (_x5) {\n        return _ref.apply(this, arguments);\n      };\n    }())\n  }]);\n\n  return RestClient;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.\n\n    signal.addEventListener(function () {\n      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.\n\n      reject(ERROR_FACTORY.create(\"fetch-throttle\"\n      /* FETCH_THROTTLE */\n      , {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\n\n\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  } // Uses string index defined by ErrorData, which FirebaseError implements.\n\n\n  var httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\n\n\nvar RetryingClient = /*#__PURE__*/function () {\n  function RetryingClient(client, storage) {\n    _classCallCheck(this, RetryingClient);\n\n    this.client = client;\n    this.storage = storage;\n  }\n\n  _createClass(RetryingClient, [{\n    key: \"fetch\",\n    value: function () {\n      var _fetch3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(request) {\n        var throttleMetadata;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.storage.getThrottleMetadata();\n\n              case 2:\n                _context3.t0 = _context3.sent;\n\n                if (_context3.t0) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                _context3.t0 = {\n                  backoffCount: 0,\n                  throttleEndTimeMillis: Date.now()\n                };\n\n              case 5:\n                throttleMetadata = _context3.t0;\n                return _context3.abrupt(\"return\", this.attemptFetch(request, throttleMetadata));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetch(_x6) {\n        return _fetch3.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n    /**\r\n     * A recursive helper for attempting a fetch request repeatedly.\r\n     *\r\n     * @throws any non-retriable errors.\r\n     */\n\n  }, {\n    key: \"attemptFetch\",\n    value: function () {\n      var _attemptFetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, _ref2) {\n        var throttleEndTimeMillis, backoffCount, response, throttleMetadata;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throttleEndTimeMillis = _ref2.throttleEndTimeMillis, backoffCount = _ref2.backoffCount;\n                _context4.next = 3;\n                return setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n              case 3:\n                _context4.prev = 3;\n                _context4.next = 6;\n                return this.client.fetch(request);\n\n              case 6:\n                response = _context4.sent;\n                _context4.next = 9;\n                return this.storage.deleteThrottleMetadata();\n\n              case 9:\n                return _context4.abrupt(\"return\", response);\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](3);\n\n                if (isRetriableError(_context4.t0)) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                throw _context4.t0;\n\n              case 16:\n                // Increments backoff state.\n                throttleMetadata = {\n                  throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\n                  backoffCount: backoffCount + 1\n                }; // Persists state.\n\n                _context4.next = 19;\n                return this.storage.setThrottleMetadata(throttleMetadata);\n\n              case 19:\n                return _context4.abrupt(\"return\", this.attemptFetch(request, throttleMetadata));\n\n              case 20:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 12]]);\n      }));\n\n      function attemptFetch(_x7, _x8) {\n        return _attemptFetch.apply(this, arguments);\n      }\n\n      return attemptFetch;\n    }()\n  }]);\n\n  return RetryingClient;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\n\nvar DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\n\nvar RemoteConfig = /*#__PURE__*/function () {\n  function RemoteConfig( // Required by FirebaseServiceFactory interface.\n  app, // JS doesn't support private yet\n  // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n  // underscore prefix.\n\n  /**\r\n   * @internal\r\n   */\n  _client,\n  /**\r\n   * @internal\r\n   */\n  _storageCache,\n  /**\r\n   * @internal\r\n   */\n  _storage,\n  /**\r\n   * @internal\r\n   */\n  _logger) {\n    _classCallCheck(this, RemoteConfig);\n\n    this.app = app;\n    this._client = _client;\n    this._storageCache = _storageCache;\n    this._storage = _storage;\n    this._logger = _logger;\n    /**\r\n     * Tracks completion of initialization promise.\r\n     * @internal\r\n     */\n\n    this._isInitializationComplete = false;\n    this.settings = {\n      fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n      minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n    };\n    this.defaultConfig = {};\n  }\n\n  _createClass(RemoteConfig, [{\n    key: \"fetchTimeMillis\",\n    get: function get() {\n      return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n    }\n  }, {\n    key: \"lastFetchStatus\",\n    get: function get() {\n      return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n    }\n  }]);\n\n  return RemoteConfig;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\n\n\nfunction toFirebaseError(event, errorCode) {\n  var originalError = event.target.error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nvar APP_NAMESPACE_STORE = 'app_namespace_store';\nvar DB_NAME = 'firebase_remote_config';\nvar DB_VERSION = 1; // Visible for testing.\n\nfunction openDatabase() {\n  return new Promise(function (resolve, reject) {\n    try {\n      var request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = function (event) {\n        reject(toFirebaseError(event, \"storage-open\"\n        /* STORAGE_OPEN */\n        ));\n      };\n\n      request.onsuccess = function (event) {\n        resolve(event.target.result);\n      };\n\n      request.onupgradeneeded = function (event) {\n        var db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: error\n      }));\n    }\n  });\n}\n/**\r\n * Abstracts data persistence.\r\n */\n\n\nvar Storage = /*#__PURE__*/function () {\n  /**\r\n   * @param appId enables storage segmentation by app (ID + name).\r\n   * @param appName enables storage segmentation by app (ID + name).\r\n   * @param namespace enables storage segmentation by namespace.\r\n   */\n  function Storage(appId, appName, namespace) {\n    var openDbPromise = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : openDatabase();\n\n    _classCallCheck(this, Storage);\n\n    this.appId = appId;\n    this.appName = appName;\n    this.namespace = namespace;\n    this.openDbPromise = openDbPromise;\n  }\n\n  _createClass(Storage, [{\n    key: \"getLastFetchStatus\",\n    value: function getLastFetchStatus() {\n      return this.get('last_fetch_status');\n    }\n  }, {\n    key: \"setLastFetchStatus\",\n    value: function setLastFetchStatus(status) {\n      return this.set('last_fetch_status', status);\n    } // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n    // consider adding timestamp to all storage records and an optional max age arg to getters.\n\n  }, {\n    key: \"getLastSuccessfulFetchTimestampMillis\",\n    value: function getLastSuccessfulFetchTimestampMillis() {\n      return this.get('last_successful_fetch_timestamp_millis');\n    }\n  }, {\n    key: \"setLastSuccessfulFetchTimestampMillis\",\n    value: function setLastSuccessfulFetchTimestampMillis(timestamp) {\n      return this.set('last_successful_fetch_timestamp_millis', timestamp);\n    }\n  }, {\n    key: \"getLastSuccessfulFetchResponse\",\n    value: function getLastSuccessfulFetchResponse() {\n      return this.get('last_successful_fetch_response');\n    }\n  }, {\n    key: \"setLastSuccessfulFetchResponse\",\n    value: function setLastSuccessfulFetchResponse(response) {\n      return this.set('last_successful_fetch_response', response);\n    }\n  }, {\n    key: \"getActiveConfig\",\n    value: function getActiveConfig() {\n      return this.get('active_config');\n    }\n  }, {\n    key: \"setActiveConfig\",\n    value: function setActiveConfig(config) {\n      return this.set('active_config', config);\n    }\n  }, {\n    key: \"getActiveConfigEtag\",\n    value: function getActiveConfigEtag() {\n      return this.get('active_config_etag');\n    }\n  }, {\n    key: \"setActiveConfigEtag\",\n    value: function setActiveConfigEtag(etag) {\n      return this.set('active_config_etag', etag);\n    }\n  }, {\n    key: \"getThrottleMetadata\",\n    value: function getThrottleMetadata() {\n      return this.get('throttle_metadata');\n    }\n  }, {\n    key: \"setThrottleMetadata\",\n    value: function setThrottleMetadata(metadata) {\n      return this.set('throttle_metadata', metadata);\n    }\n  }, {\n    key: \"deleteThrottleMetadata\",\n    value: function deleteThrottleMetadata() {\n      return this.delete('throttle_metadata');\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key) {\n        var _this = this;\n\n        var db;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.openDbPromise;\n\n              case 2:\n                db = _context5.sent;\n                return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n                  var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n                  var compositeKey = _this.createCompositeKey(key);\n\n                  try {\n                    var request = objectStore.get(compositeKey);\n\n                    request.onerror = function (event) {\n                      reject(toFirebaseError(event, \"storage-get\"\n                      /* STORAGE_GET */\n                      ));\n                    };\n\n                    request.onsuccess = function (event) {\n                      var result = event.target.result;\n\n                      if (result) {\n                        resolve(result.value);\n                      } else {\n                        resolve(undefined);\n                      }\n                    };\n                  } catch (e) {\n                    reject(ERROR_FACTORY.create(\"storage-get\"\n                    /* STORAGE_GET */\n                    , {\n                      originalErrorMessage: e && e.message\n                    }));\n                  }\n                }));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function get(_x9) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, value) {\n        var _this2 = this;\n\n        var db;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.openDbPromise;\n\n              case 2:\n                db = _context6.sent;\n                return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n                  var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n                  var compositeKey = _this2.createCompositeKey(key);\n\n                  try {\n                    var request = objectStore.put({\n                      compositeKey: compositeKey,\n                      value: value\n                    });\n\n                    request.onerror = function (event) {\n                      reject(toFirebaseError(event, \"storage-set\"\n                      /* STORAGE_SET */\n                      ));\n                    };\n\n                    request.onsuccess = function () {\n                      resolve();\n                    };\n                  } catch (e) {\n                    reject(ERROR_FACTORY.create(\"storage-set\"\n                    /* STORAGE_SET */\n                    , {\n                      originalErrorMessage: e && e.message\n                    }));\n                  }\n                }));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function set(_x10, _x11) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key) {\n        var _this3 = this;\n\n        var db;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.openDbPromise;\n\n              case 2:\n                db = _context7.sent;\n                return _context7.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n                  var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n                  var compositeKey = _this3.createCompositeKey(key);\n\n                  try {\n                    var request = objectStore.delete(compositeKey);\n\n                    request.onerror = function (event) {\n                      reject(toFirebaseError(event, \"storage-delete\"\n                      /* STORAGE_DELETE */\n                      ));\n                    };\n\n                    request.onsuccess = function () {\n                      resolve();\n                    };\n                  } catch (e) {\n                    reject(ERROR_FACTORY.create(\"storage-delete\"\n                    /* STORAGE_DELETE */\n                    , {\n                      originalErrorMessage: e && e.message\n                    }));\n                  }\n                }));\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _delete(_x12) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }() // Facilitates composite key functionality (which is unsupported in IE).\n\n  }, {\n    key: \"createCompositeKey\",\n    value: function createCompositeKey(key) {\n      return [this.appId, this.appName, this.namespace, key].join();\n    }\n  }]);\n\n  return Storage;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\n\n\nvar StorageCache = /*#__PURE__*/function () {\n  function StorageCache(storage) {\n    _classCallCheck(this, StorageCache);\n\n    this.storage = storage;\n  }\n  /**\r\n   * Memory-only getters\r\n   */\n\n\n  _createClass(StorageCache, [{\n    key: \"getLastFetchStatus\",\n    value: function getLastFetchStatus() {\n      return this.lastFetchStatus;\n    }\n  }, {\n    key: \"getLastSuccessfulFetchTimestampMillis\",\n    value: function getLastSuccessfulFetchTimestampMillis() {\n      return this.lastSuccessfulFetchTimestampMillis;\n    }\n  }, {\n    key: \"getActiveConfig\",\n    value: function getActiveConfig() {\n      return this.activeConfig;\n    }\n    /**\r\n     * Read-ahead getter\r\n     */\n\n  }, {\n    key: \"loadFromStorage\",\n    value: function () {\n      var _loadFromStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var lastFetchStatusPromise, lastSuccessfulFetchTimestampMillisPromise, activeConfigPromise, lastFetchStatus, lastSuccessfulFetchTimestampMillis, activeConfig;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                lastFetchStatusPromise = this.storage.getLastFetchStatus();\n                lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n                activeConfigPromise = this.storage.getActiveConfig(); // Note:\n                // 1. we consistently check for undefined to avoid clobbering defined values\n                //   in memory\n                // 2. we defer awaiting to improve readability, as opposed to destructuring\n                //   a Promise.all result, for example\n\n                _context8.next = 5;\n                return lastFetchStatusPromise;\n\n              case 5:\n                lastFetchStatus = _context8.sent;\n\n                if (lastFetchStatus) {\n                  this.lastFetchStatus = lastFetchStatus;\n                }\n\n                _context8.next = 9;\n                return lastSuccessfulFetchTimestampMillisPromise;\n\n              case 9:\n                lastSuccessfulFetchTimestampMillis = _context8.sent;\n\n                if (lastSuccessfulFetchTimestampMillis) {\n                  this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n                }\n\n                _context8.next = 13;\n                return activeConfigPromise;\n\n              case 13:\n                activeConfig = _context8.sent;\n\n                if (activeConfig) {\n                  this.activeConfig = activeConfig;\n                }\n\n              case 15:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function loadFromStorage() {\n        return _loadFromStorage.apply(this, arguments);\n      }\n\n      return loadFromStorage;\n    }()\n    /**\r\n     * Write-through setters\r\n     */\n\n  }, {\n    key: \"setLastFetchStatus\",\n    value: function setLastFetchStatus(status) {\n      this.lastFetchStatus = status;\n      return this.storage.setLastFetchStatus(status);\n    }\n  }, {\n    key: \"setLastSuccessfulFetchTimestampMillis\",\n    value: function setLastSuccessfulFetchTimestampMillis(timestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n      return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n    }\n  }, {\n    key: \"setActiveConfig\",\n    value: function setActiveConfig(activeConfig) {\n      this.activeConfig = activeConfig;\n      return this.storage.setActiveConfig(activeConfig);\n    }\n  }]);\n\n  return StorageCache;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerRemoteConfig() {\n  _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n\n  function remoteConfigFactory(container, _ref3) {\n    var namespace = _ref3.instanceIdentifier;\n\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate(); // The following call will always succeed because rc has `import '@firebase/installations'`\n\n    var installations = container.getProvider('installations-internal').getImmediate(); // Guards against the SDK being used in non-browser environments.\n\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"registration-window\"\n      /* REGISTRATION_WINDOW */\n      );\n    } // Guards against the SDK being used when indexedDB is not available.\n\n\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(\"indexed-db-unavailable\"\n      /* INDEXED_DB_UNAVAILABLE */\n      );\n    } // Normalizes optional inputs.\n\n\n    var _app$options = app.options,\n        projectId = _app$options.projectId,\n        apiKey = _app$options.apiKey,\n        appId = _app$options.appId;\n\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"registration-project-id\"\n      /* REGISTRATION_PROJECT_ID */\n      );\n    }\n\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"registration-api-key\"\n      /* REGISTRATION_API_KEY */\n      );\n    }\n\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"registration-app-id\"\n      /* REGISTRATION_APP_ID */\n      );\n    }\n\n    namespace = namespace || 'firebase';\n    var storage = new Storage(appId, app.name, namespace);\n    var storageCache = new StorageCache(storage);\n    var logger = new Logger(name); // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n\n    logger.logLevel = LogLevel.ERROR;\n    var restClient = new RestClient(installations, // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n    SDK_VERSION, namespace, projectId, apiKey, appId);\n    var retryingClient = new RetryingClient(restClient, storage);\n    var cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\n    var remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger); // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n    ensureInitialized(remoteConfigInstance);\n    return remoteConfigInstance;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n\n/**\r\n *\r\n * Performs fetch and activate operations, as a convenience.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\n\n\nfunction fetchAndActivate(_x13) {\n  return _fetchAndActivate.apply(this, arguments);\n}\n/**\r\n * This method provides two different checks:\r\n *\r\n * 1. Check if IndexedDB exists in the browser environment.\r\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\r\n *\r\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\r\n * can be initialized in this environment, or false if it cannot.\r\n * @public\r\n */\n\n\nfunction _fetchAndActivate() {\n  _fetchAndActivate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(remoteConfig) {\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            remoteConfig = getModularInstance(remoteConfig);\n            _context12.next = 3;\n            return fetchConfig(remoteConfig);\n\n          case 3:\n            return _context12.abrupt(\"return\", activate(remoteConfig));\n\n          case 4:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  }));\n  return _fetchAndActivate.apply(this, arguments);\n}\n\nfunction isSupported() {\n  return _isSupported.apply(this, arguments);\n}\n/**\r\n * Firebase Remote Config\r\n *\r\n * @packageDocumentation\r\n */\n\n/** register component and version */\n\n\nfunction _isSupported() {\n  _isSupported = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n    var isDBOpenable;\n    return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            if (isIndexedDBAvailable()) {\n              _context13.next = 2;\n              break;\n            }\n\n            return _context13.abrupt(\"return\", false);\n\n          case 2:\n            _context13.prev = 2;\n            _context13.next = 5;\n            return validateIndexedDBOpenable();\n\n          case 5:\n            isDBOpenable = _context13.sent;\n            return _context13.abrupt(\"return\", isDBOpenable);\n\n          case 9:\n            _context13.prev = 9;\n            _context13.t0 = _context13[\"catch\"](2);\n            return _context13.abrupt(\"return\", false);\n\n          case 12:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13, null, [[2, 9]]);\n  }));\n  return _isSupported.apply(this, arguments);\n}\n\nregisterRemoteConfig();\nexport { activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getRemoteConfig, getString, getValue, isSupported, setLogLevel };","map":{"version":3,"mappings":"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","names":["RemoteConfigAbortSignal","listener","listeners","push","forEach","RC_COMPONENT_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","hasErrorCode","e","errorCode","FirebaseError","code","indexOf","DEFAULT_VALUE_FOR_BOOLEAN","DEFAULT_VALUE_FOR_STRING","DEFAULT_VALUE_FOR_NUMBER","BOOLEAN_TRUTHY_VALUES","Value","_source","_value","toLowerCase","num","Number","isNaN","getRemoteConfig","app","getApp","getModularInstance","rcProvider","_getProvider","getImmediate","activate","remoteConfig","rc","Promise","all","_storage","getLastSuccessfulFetchResponse","getActiveConfigEtag","lastSuccessfulFetchResponse","activeConfigEtag","config","eTag","_storageCache","setActiveConfig","setActiveConfigEtag","ensureInitialized","_initializePromise","loadFromStorage","then","_isInitializationComplete","fetchConfig","abortSignal","setTimeout","abort","settings","fetchTimeoutMillis","_client","fetch","cacheMaxAgeMillis","minimumFetchIntervalMillis","signal","setLastFetchStatus","lastFetchStatus","getAll","getAllKeys","getActiveConfig","defaultConfig","reduce","allConfigs","key","getValue","getBoolean","asBoolean","getNumber","asNumber","getString","asString","_logger","debug","activeConfig","undefined","ValueImpl","String","setLogLevel","logLevel","FirebaseLogLevel","DEBUG","SILENT","ERROR","obj1","obj2","Object","keys","CachingClient","client","storage","storageCache","logger","lastSuccessfulFetchTimestampMillis","cacheAgeMillis","Date","now","isCachedDataFresh","request","getLastSuccessfulFetchTimestampMillis","response","storageOperations","setLastSuccessfulFetchTimestampMillis","status","setLastSuccessfulFetchResponse","getUserLanguage","navigatorLanguage","navigator","languages","language","RestClient","firebaseInstallations","sdkVersion","namespace","projectId","apiKey","appId","getId","getToken","installationId","installationToken","urlBase","window","FIREBASE_REMOTE_CONFIG_URL_BASE","url","headers","requestBody","sdk_version","app_instance_id","app_instance_id_token","app_id","language_code","options","method","body","JSON","stringify","fetchPromise","timeoutPromise","_resolve","reject","addEventListener","error","Error","name","race","create","originalErrorMessage","message","responseEtag","get","json","responseBody","state","httpStatus","setAbortableTimeout","throttleEndTimeMillis","resolve","backoffMillis","Math","max","timeout","clearTimeout","isRetriableError","customData","RetryingClient","getThrottleMetadata","backoffCount","throttleMetadata","attemptFetch","deleteThrottleMetadata","calculateBackoffMillis","setThrottleMetadata","DEFAULT_FETCH_TIMEOUT_MILLIS","DEFAULT_CACHE_MAX_AGE_MILLIS","RemoteConfig","getLastFetchStatus","toFirebaseError","event","originalError","target","APP_NAMESPACE_STORE","DB_NAME","DB_VERSION","openDatabase","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","Storage","appName","openDbPromise","set","timestamp","etag","metadata","delete","transaction","objectStore","compositeKey","createCompositeKey","value","put","join","StorageCache","lastFetchStatusPromise","lastSuccessfulFetchTimestampMillisPromise","activeConfigPromise","timestampMillis","registerRemoteConfig","_registerComponent","Component","remoteConfigFactory","setMultipleInstances","registerVersion","packageName","version","container","instanceIdentifier","getProvider","installations","isIndexedDBAvailable","Logger","restClient","SDK_VERSION","retryingClient","cachingClient","remoteConfigInstance","RemoteConfigImpl","fetchAndActivate","isSupported","validateIndexedDBOpenable","isDBOpenable"],"sources":["../../src/client/remote_config_fetch_client.ts","../../src/constants.ts","../../src/errors.ts","../../src/value.ts","../../src/api.ts","../../src/client/caching_client.ts","../../src/language.ts","../../src/client/rest_client.ts","../../src/client/retrying_client.ts","../../src/remote_config.ts","../../src/storage/storage.ts","../../src/storage/storage_cache.ts","../../src/register.ts","../../src/api2.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const RC_COMPONENT_NAME = 'remote-config';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status',\n  INDEXED_DB_UNAVAILABLE = 'indexed-db-unavailable'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [ErrorCode.INDEXED_DB_UNAVAILABLE]:\n    'Indexed DB is not supported by current browser'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig,\n  Value\n} from './public_types';\nimport { RemoteConfigAbortSignal } from './client/remote_config_fetch_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Value as ValueImpl } from './value';\nimport { LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n * @returns A {@link RemoteConfig} instance.\n *\n * @public\n */\nexport function getRemoteConfig(app: FirebaseApp = getApp()): RemoteConfig {\n  app = getModularInstance(app);\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n  return rcProvider.getImmediate();\n}\n\n/**\n * Makes the last fetched config available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function activate(remoteConfig: RemoteConfig): Promise<boolean> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n    rc._storage.getLastSuccessfulFetchResponse(),\n    rc._storage.getActiveConfigEtag()\n  ]);\n  if (\n    !lastSuccessfulFetchResponse ||\n    !lastSuccessfulFetchResponse.config ||\n    !lastSuccessfulFetchResponse.eTag ||\n    lastSuccessfulFetchResponse.eTag === activeConfigEtag\n  ) {\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n  }\n  await Promise.all([\n    rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n    rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n  ]);\n  return true;\n}\n\n/**\n * Ensures the last activated config are available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\n * @public\n */\nexport function ensureInitialized(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n  return rc._initializePromise;\n}\n\n/**\n * Fetches and caches configuration from the Remote Config service.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @public\n */\nexport async function fetchConfig(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n  const abortSignal = new RemoteConfigAbortSignal();\n\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n  }, rc.settings.fetchTimeoutMillis);\n\n  // Catches *all* errors thrown by client so status can be set consistently.\n  try {\n    await rc._client.fetch({\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal\n    });\n\n    await rc._storageCache.setLastFetchStatus('success');\n  } catch (e) {\n    const lastFetchStatus = hasErrorCode(e, ErrorCode.FETCH_THROTTLE)\n      ? 'throttle'\n      : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n  }\n}\n\n/**\n * Gets all config.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns All config.\n *\n * @public\n */\nexport function getAll(remoteConfig: RemoteConfig): Record<string, Value> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  return getAllKeys(\n    rc._storageCache.getActiveConfig(),\n    rc.defaultConfig\n  ).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {} as Record<string, Value>);\n}\n\n/**\n * Gets the value for the given key as a boolean.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a boolean.\n * @public\n */\nexport function getBoolean(remoteConfig: RemoteConfig, key: string): boolean {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n\n/**\n * Gets the value for the given key as a number.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a number.\n *\n * @public\n */\nexport function getNumber(remoteConfig: RemoteConfig, key: string): number {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n\n/**\n * Gets the value for the given key as a string.\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a string.\n *\n * @public\n */\nexport function getString(remoteConfig: RemoteConfig, key: string): string {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n\n/**\n * Gets the {@link Value} for the given key.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key.\n *\n * @public\n */\nexport function getValue(remoteConfig: RemoteConfig, key: string): Value {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(\n      `A value was requested for key \"${key}\" before SDK initialization completed.` +\n        ' Await on ensureInitialized if the intent was to get a previously activated value.'\n    );\n  }\n  const activeConfig = rc._storageCache.getActiveConfig();\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new ValueImpl('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new ValueImpl('default', String(rc.defaultConfig[key]));\n  }\n  rc._logger.debug(\n    `Returning static value for key \"${key}\".` +\n      ' Define a default or remote value if this is unintentional.'\n  );\n  return new ValueImpl('static');\n}\n\n/**\n * Defines the log level to use.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param logLevel - The log level to set.\n *\n * @public\n */\nexport function setLogLevel(\n  remoteConfig: RemoteConfig,\n  logLevel: RemoteConfigLogLevel\n): void {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n    case 'silent':\n      rc._logger.logLevel = FirebaseLogLevel.SILENT;\n      break;\n    default:\n      rc._logger.logLevel = FirebaseLogLevel.ERROR;\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] =\n      await Promise.all([\n        this.storage.getLastSuccessfulFetchTimestampMillis(),\n        this.storage.getLastSuccessfulFetchResponse()\n      ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: _FirebaseInstallationsInternal,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if (originalError.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  RemoteConfigSettings\n} from './public_types';\nimport { StorageCache } from './storage/storage_cache';\nimport { RemoteConfigFetchClient } from './client/remote_config_fetch_client';\nimport { Storage } from './storage/storage';\nimport { Logger } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  /**\n   * Tracks completion of initialization promise.\n   * @internal\n   */\n  _isInitializationComplete = false;\n\n  /**\n   * De-duplicates initialization calls.\n   * @internal\n   */\n  _initializePromise?: Promise<void>;\n\n  settings: RemoteConfigSettings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    /**\n     * @internal\n     */\n    readonly _client: RemoteConfigFetchClient,\n    /**\n     * @internal\n     */\n    readonly _storageCache: StorageCache,\n    /**\n     * @internal\n     */\n    readonly _storage: Storage,\n    /**\n     * @internal\n     */\n    readonly _logger: Logger\n  ) {}\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n      };\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(\n        ERROR_FACTORY.create(ErrorCode.STORAGE_OPEN, {\n          originalErrorMessage: error\n        })\n      );\n    }\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise =\n      this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis =\n      await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis =\n        lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { RemoteConfig } from './public_types';\nimport { name as packageName, version } from '../package.json';\nimport { ensureInitialized } from './api';\nimport { CachingClient } from './client/caching_client';\nimport { RestClient } from './client/rest_client';\nimport { RetryingClient } from './client/retrying_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, ERROR_FACTORY } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Storage } from './storage/storage';\nimport { StorageCache } from './storage/storage_cache';\n// This needs to be in the same file that calls `getProvider()` on the component\n// or it will get tree-shaken out.\nimport '@firebase/installations';\n\nexport function registerRemoteConfig(): void {\n  _registerComponent(\n    new Component(\n      RC_COMPONENT_NAME,\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(packageName, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(packageName, version, '__BUILD_TARGET__');\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    { instanceIdentifier: namespace }: InstanceFactoryOptions\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container\n      .getProvider('installations-internal')\n      .getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n    // Guards against the SDK being used when indexedDB is not available.\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNAVAILABLE);\n    }\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfigImpl(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ensureInitialized(remoteConfigInstance);\n\n    return remoteConfigInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RemoteConfig } from './public_types';\nimport { activate, fetchConfig } from './api';\nimport {\n  getModularInstance,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\n *\n * Performs fetch and activate operations, as a convenience.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function fetchAndActivate(\n  remoteConfig: RemoteConfig\n): Promise<boolean> {\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n\n/**\n * This method provides two different checks:\n *\n * 1. Check if IndexedDB exists in the browser environment.\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\n *\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\n * can be initialized in this environment, or false if it cannot.\n * @public\n */\nexport async function isSupported(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n","/**\n * Firebase Remote Config\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerRemoteConfig } from './register';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport * from './api';\nexport * from './api2';\nexport * from './public_types';\n\n/** register component and version */\nregisterRemoteConfig();\n"]},"metadata":{},"sourceType":"module"}