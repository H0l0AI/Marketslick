{"ast":null,"code":"import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst APP_CHECK_STATES = new Map();\nconst DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nconst DEBUG_STATE = {\n  initialized: false,\n  enabled: false\n};\n\nfunction getState(app) {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nfunction setState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n}\n\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nconst EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nconst TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\n\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\n\nclass Refresher {\n  constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n\n  start() {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop() {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning() {\n    return !!this.pending;\n  }\n\n  async process(hasSucceeded) {\n    this.stop();\n\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded)); // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n      this.pending.resolve();\n      await this.pending.promise;\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  getNextRun(hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound; // Return typical wait duration interval after a successful operation.\n\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval; // Double interval for next consecutive error.\n\n      this.nextErrorWaitInterval *= 2; // Make sure next wait interval does not exceed the maximum upper bound.\n\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n\n      return currentErrorWaitInterval;\n    }\n  }\n\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"already-initialized\"\n  /* ALREADY_INITIALIZED */\n  ]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.',\n  [\"use-before-activation\"\n  /* USE_BEFORE_ACTIVATION */\n  ]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.',\n  [\"fetch-network-error\"\n  /* FETCH_NETWORK_ERROR */\n  ]: 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.',\n  [\"fetch-parse-error\"\n  /* FETCH_PARSE_ERROR */\n  ]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status-error\"\n  /* FETCH_STATUS_ERROR */\n  ]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"storage-open\"\n  /* STORAGE_OPEN */\n  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\"\n  /* STORAGE_GET */\n  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\"\n  /* STORAGE_WRITE */\n  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"recaptcha-error\"\n  /* RECAPTCHA_ERROR */\n  ]: 'ReCAPTCHA error.',\n  [\"throttled\"\n  /* THROTTLED */\n  ]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction getRecaptcha() {\n  let isEnterprise = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _a;\n\n  if (isEnterprise) {\n    return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\n  }\n\n  return self.grecaptcha;\n}\n\nfunction ensureActivated(app) {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\"\n    /* USE_BEFORE_ACTIVATION */\n    , {\n      appName: app.name\n    });\n  }\n}\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n */\n\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction getDurationString(durationInMillis) {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n  let result = '';\n\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value) {\n  if (value === 0) {\n    return '00';\n  }\n\n  return value >= 10 ? value.toString() : '0' + value;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function exchangeToken(_ref, platformLoggerProvider) {\n  let {\n    url,\n    body\n  } = _ref;\n  const headers = {\n    'Content-Type': 'application/json'\n  }; // If platform logger exists, add the platform info string to the header.\n\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-network-error\"\n    /* FETCH_NETWORK_ERROR */\n    , {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(\"fetch-status-error\"\n    /* FETCH_STATUS_ERROR */\n    , {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody;\n\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\"\n    /* FETCH_PARSE_ERROR */\n    , {\n      originalErrorMessage: originalError.message\n    });\n  } // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n\n\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\"\n    /* FETCH_PARSE_ERROR */\n    , {\n      originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` + `format: ${responseBody.ttl}`\n    });\n  }\n\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\nlet dbPromise = null;\n\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n\n      request.onerror = event => {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-open\"\n        /* STORAGE_OPEN */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n\n      request.onupgradeneeded = event => {\n        const db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: e.message\n      }));\n    }\n  });\n  return dbPromise;\n}\n\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\n\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\n\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\n\nasync function write(key, value) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      var _a;\n\n      reject(ERROR_FACTORY.create(\"storage-set\"\n      /* STORAGE_WRITE */\n      , {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\n\nasync function read(key) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = event.target.result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      var _a;\n\n      reject(ERROR_FACTORY.create(\"storage-get\"\n      /* STORAGE_GET */\n      , {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\n\nfunction computeKey(app) {\n  return `${app.options.appId}-${app.name}`;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst logger = new Logger('@firebase/app-check');\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\n\nasync function readTokenFromStorage(app) {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n\n    return token;\n  }\n\n  return undefined;\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\n\n\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nasync function readOrCreateDebugTokenFromStorage() {\n  /**\r\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n   * But it won't happen here, because this function will be called exactly once.\r\n   */\n  let existingDebugToken = undefined;\n\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {// failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4(); // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n\n    writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isDebugMode() {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nasync function getDebugToken() {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nfunction initializeDebugMode() {\n  const globals = getGlobal();\n  const debugState = getDebugState(); // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n\n  debugState.initialized = true;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\n\n\nconst defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\n\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData),\n  /* webSafe= */\n  false);\n}\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\n\n\nasync function getToken$2(appCheck) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const app = appCheck.app;\n  ensureActivated(app);\n  const state = getState(app);\n  /**\r\n   * First check if there is a token in memory from a previous `getToken()` call.\r\n   */\n\n  let token = state.token;\n  let error = undefined;\n  /**\r\n   * If there is no token in memory, try to load token from indexedDB.\r\n   */\n\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n    }\n  } // Return the cached token (from either memory or indexedDB) if it's valid\n\n\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  } // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n\n\n  let shouldCallListeners = false;\n  /**\r\n   * DEBUG MODE\r\n   * If debug mode is set, and there is no cached token, fetch a new App\r\n   * Check token using the debug token, and return it directly.\r\n   */\n\n  if (isDebugMode()) {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      state.exchangeTokenPromise = exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.platformLoggerProvider).then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n\n    const tokenFromDebugExchange = await state.exchangeTokenPromise; // Write debug token to indexedDB.\n\n    await writeTokenToStorage(app, tokenFromDebugExchange); // Write debug token to state.\n\n    setState(app, Object.assign(Object.assign({}, state), {\n      token: tokenFromDebugExchange\n    }));\n    return {\n      token: tokenFromDebugExchange.token\n    };\n  }\n  /**\r\n   * request a new token\r\n   */\n\n\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider.getToken().then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n\n    token = await state.exchangeTokenPromise;\n  } catch (e) {\n    if (e.code === `appCheck/${\"throttled\"\n    /* THROTTLED */\n    }`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn(e.message);\n    } else {\n      // `getToken()` should never throw, but logging error text to console will aid debugging.\n      logger.error(e);\n    } // Always save error to be added to dummy token.\n\n\n    error = e;\n  }\n\n  let interopTokenResult;\n\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    }; // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n\n    setState(app, Object.assign(Object.assign({}, state), {\n      token\n    }));\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n\n  return interopTokenResult;\n}\n\nfunction addTokenListener(appCheck, type, listener, onError) {\n  const {\n    app\n  } = appCheck;\n  const state = getState(app);\n  const tokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  setState(app, Object.assign(Object.assign({}, state), {\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  })); // Invoke the listener async immediately if there is a valid token\n  // in memory.\n\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve().then(() => {\n      listener({\n        token: validToken.token\n      });\n      initTokenRefresher(appCheck);\n    }).catch(() => {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  }\n  /**\r\n   * Wait for any cached token promise to resolve before starting the token\r\n   * refresher. The refresher checks to see if there is an existing token\r\n   * in state and calls the exchange endpoint if not. We should first let the\r\n   * IndexedDB check have a chance to populate state if it can.\r\n   *\r\n   * Listener call isn't needed here because cachedTokenPromise will call any\r\n   * listeners that exist when it resolves.\r\n   */\n  // state.cachedTokenPromise is always populated in `activate()`.\n\n\n  void state.cachedTokenPromise.then(() => initTokenRefresher(appCheck));\n}\n\nfunction removeTokenListener(app, listener) {\n  const state = getState(app);\n  const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\n\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, Object.assign(Object.assign({}, state), {\n    tokenObservers: newObservers\n  }));\n}\n/**\r\n * Logic to create and start refresher as needed.\r\n */\n\n\nfunction initTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  const state = getState(app); // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n\n  let refresher = state.tokenRefresher;\n\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    setState(app, Object.assign(Object.assign({}, state), {\n      tokenRefresher: refresher\n    }));\n  }\n\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  return new Refresher( // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  async () => {\n    const state = getState(app); // If there is no token, we will try to load it from storage and use it\n    // If there is a token, we force refresh it because we know it's going to expire soon\n\n    let result;\n\n    if (!state.token) {\n      result = await getToken$2(appCheck);\n    } else {\n      result = await getToken$2(appCheck, true);\n    } // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n\n\n    if (result.error) {\n      throw result.error;\n    }\n  }, () => {\n    return true;\n  }, () => {\n    const state = getState(app);\n\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      let nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000; // Do not allow refresh time to be past (expireTime - 5 minutes)\n\n      const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\n\nfunction notifyTokenListeners(app, token) {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === \"EXTERNAL\"\n      /* EXTERNAL */\n      && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {// Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * AppCheck Service class.\r\n */\n\n\nclass AppCheckService {\n  constructor(app, platformLoggerProvider) {\n    this.app = app;\n    this.platformLoggerProvider = platformLoggerProvider;\n  }\n\n  _delete() {\n    const {\n      tokenObservers\n    } = getState(this.app);\n\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nfunction factory(app, platformLoggerProvider) {\n  return new AppCheckService(app, platformLoggerProvider);\n}\n\nfunction internalFactory(appCheck) {\n  return {\n    getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\n    addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\"\n    /* INTERNAL */\n    , listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n\nconst name = \"@firebase/app-check\";\nconst version = \"0.5.3\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\n\nfunction initializeV3(app, siteKey) {\n  const state = getState(app);\n  const initialized = new Deferred();\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: {\n      initialized\n    }\n  }));\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(false);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n\nfunction initializeEnterprise(app, siteKey) {\n  const state = getState(app);\n  const initialized = new Deferred();\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: {\n      initialized\n    }\n  }));\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(true);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\n\n\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n/**\r\n * Add invisible div to page.\r\n */\n\n\nfunction makeDiv(app) {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nasync function getToken$1(app) {\n  ensureActivated(app); // ensureActivated() guarantees that reCAPTCHAState is set\n\n  const reCAPTCHAState = getState(app).reCAPTCHAState;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState;\n    recaptcha.ready(() => {\n      resolve( // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n      recaptcha.execute(reCAPTCHAState.widgetId, {\n        action: 'fire_app_check'\n      }));\n    });\n  });\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\n\n\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  const state = getState(app);\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: Object.assign(Object.assign({}, state.reCAPTCHAState), {\n      // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    })\n  }));\n}\n\nfunction loadReCAPTCHAV3Script(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nclass ReCaptchaV3Provider {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    var _a;\n\n    throwIfThrottled(this._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._platformLoggerProvider are available.\n\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\"\n      /* RECAPTCHA_ERROR */\n      );\n    });\n    let result;\n\n    try {\n      result = await exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider);\n    } catch (e) {\n      if (e.code === \"fetch-status-error\"\n      /* FETCH_STATUS_ERROR */\n      ) {\n        this._throttleData = setBackoff(Number((_a = e.customData) === null || _a === void 0 ? void 0 : _a.httpStatus), this._throttleData);\n        throw ERROR_FACTORY.create(\"throttled\"\n        /* THROTTLED */\n        , {\n          time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    } // If successful, clear throttle data.\n\n\n    this._throttleData = null;\n    return result;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initializeV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nclass ReCaptchaEnterpriseProvider {\n  /**\r\n   * Create a ReCaptchaEnterpriseProvider instance.\r\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    var _a;\n\n    throwIfThrottled(this._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._platformLoggerProvider are available.\n\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\"\n      /* RECAPTCHA_ERROR */\n      );\n    });\n    let result;\n\n    try {\n      result = await exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider);\n    } catch (e) {\n      if (e.code === \"fetch-status-error\"\n      /* FETCH_STATUS_ERROR */\n      ) {\n        this._throttleData = setBackoff(Number((_a = e.customData) === null || _a === void 0 ? void 0 : _a.httpStatus), this._throttleData);\n        throw ERROR_FACTORY.create(\"throttled\"\n        /* THROTTLED */\n        , {\n          time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    } // If successful, clear throttle data.\n\n\n    this._throttleData = null;\n    return result;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initializeEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * Custom provider class.\r\n * @public\r\n */\n\n\nclass CustomProvider {\n  constructor(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken(); // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token); // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n\n    const issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n    return Object.assign(Object.assign({}, customToken), {\n      issuedAtTimeMillis\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof CustomProvider) {\n      return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * Set throttle data to block requests until after a certain time\r\n * depending on the failed request's status code.\r\n * @param httpStatus - Status code of failed request.\r\n * @param throttleData - `ThrottleData` object containing previous throttle\r\n * data state.\r\n * @returns Data about current throttle state and expiration time.\r\n */\n\n\nfunction setBackoff(httpStatus, throttleData) {\n  /**\r\n   * Block retries for 1 day for the following error codes:\r\n   *\r\n   * 404: Likely malformed URL.\r\n   *\r\n   * 403:\r\n   * - Attestation failed\r\n   * - Wrong API key\r\n   * - Project deleted\r\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\r\n     * For all other error codes, the time when it is ok to retry again\r\n     * is based on exponential backoff.\r\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData) {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(\"throttled\"\n      /* THROTTLED */\n      , {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\n\n\nfunction initializeAppCheck() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n\n  const provider = _getProvider(app, 'app-check'); // Ensure initializeDebugMode() is only called once.\n\n\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  } // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n\n\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token => // Not using logger because I don't think we ever want this accidentally hidden.\n    console.log(`App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`));\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\"\n      /* ALREADY_INITIALIZED */\n      , {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({\n    options\n  });\n\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled); // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n\n\n  if (getState(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, \"INTERNAL\"\n    /* INTERNAL */\n    , () => {});\n  }\n\n  return appCheck;\n}\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\n\n\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\n  const state = getState(app);\n  const newState = Object.assign(Object.assign({}, state), {\n    activated: true\n  });\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, Object.assign(Object.assign({}, getState(app)), {\n        token: cachedToken\n      })); // notify all listeners with the cached token\n\n      notifyTokenListeners(app, {\n        token: cachedToken.token\n      });\n    }\n\n    return cachedToken;\n  }); // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n\n  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  setState(app, newState);\n  newState.provider.initialize(app);\n}\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\n\n\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  const app = appCheckInstance.app;\n  const state = getState(app); // This will exist if any product libraries have called\n  // `addTokenListener()`\n\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n\n  setState(app, Object.assign(Object.assign({}, state), {\n    isTokenAutoRefreshEnabled\n  }));\n}\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\n\n\nasync function getToken(appCheckInstance, forceRefresh) {\n  const result = await getToken$2(appCheckInstance, forceRefresh);\n\n  if (result.error) {\n    throw result.error;\n  }\n\n  return {\n    token: result.token\n  };\n}\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\n\n\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  let nextFn = () => {};\n\n  let errorFn = () => {};\n\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n\n  addTokenListener(appCheckInstance, \"EXTERNAL\"\n  /* EXTERNAL */\n  , nextFn, errorFn);\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\n\n\nconst APP_CHECK_NAME = 'app-check';\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\n\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const platformLoggerProvider = container.getProvider('platform-logger');\n    return factory(app, platformLoggerProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  )\n  /**\r\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n   * other Firebase SDKs\r\n   */\n  .setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  })); // The internal interface used by other Firebase products\n\n\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\n    const appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  ));\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };","map":{"version":3,"mappings":"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","names":["APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","initialized","enabled","getState","app","get","setState","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","ONE_DAY","Refresher","constructor","operation","retryPolicy","getWaitDuration","lowerBound","upperBound","nextErrorWaitInterval","Error","start","process","catch","stop","pending","reject","isRunning","hasSucceeded","Deferred","sleep","getNextRun","resolve","promise","error","currentErrorWaitInterval","ms","Promise","setTimeout","ERRORS","ERROR_FACTORY","ErrorFactory","getRecaptcha","isEnterprise","grecaptcha","_a","enterprise","self","ensureActivated","create","appName","name","uuidv4","replace","c","r","Math","random","v","toString","getDurationString","durationInMillis","totalSeconds","round","days","floor","hours","minutes","seconds","result","pad","value","exchangeToken","platformLoggerProvider","url","body","headers","platformLogger","getImmediate","optional","getPlatformInfoString","options","method","JSON","stringify","response","fetch","originalError","originalErrorMessage","message","status","httpStatus","responseBody","json","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","attestationToken","expireTimeMillis","issuedAtTimeMillis","getExchangeRecaptchaV3TokenRequest","reCAPTCHAToken","projectId","appId","apiKey","getExchangeRecaptchaEnterpriseTokenRequest","getExchangeDebugTokenRequest","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","onerror","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","writeTokenToIndexedDB","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","transaction","store","objectStore","put","compositeKey","_event","undefined","logger","Logger","readTokenFromStorage","isIndexedDBAvailable","warn","writeTokenToStorage","readOrCreateDebugTokenFromStorage","existingDebugToken","_e","newToken","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","getGlobal","FIREBASE_APPCHECK_DEBUG_TOKEN","deferredToken","defaultTokenErrorData","formatDummyToken","tokenErrorData","base64","encodeString","getToken","appCheck","forceRefresh","cachedToken","cachedTokenPromise","isValid","shouldCallListeners","exchangeTokenPromise","then","tokenFromDebugExchange","Object","provider","code","interopTokenResult","makeDummyTokenResult","notifyTokenListeners","addTokenListener","type","listener","onError","tokenObserver","next","validToken","initTokenRefresher","removeTokenListener","newObservers","filter","length","tokenRefresher","refresher","createTokenRefresher","isTokenAutoRefreshEnabled","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","observer","AppCheckService","_delete","factory","internalFactory","RECAPTCHA_URL","RECAPTCHA_ENTERPRISE_URL","initializeV3","siteKey","reCAPTCHAState","divId","makeDiv","loadReCAPTCHAV3Script","queueWidgetRender","initializeEnterprise","loadReCAPTCHAEnterpriseScript","container","ready","renderInvisibleWidget","invisibleDiv","document","createElement","id","style","display","appendChild","recaptcha","_reject","execute","widgetId","action","render","sitekey","size","onload","script","src","head","ReCaptchaV3Provider","_siteKey","throwIfThrottled","_throttleData","attestedClaimsToken","getReCAPTCHAToken","_app","_platformLoggerProvider","setBackoff","customData","time","allowRequestsAfter","initialize","_getProvider","initializeRecaptchaV3","isEqual","otherProvider","ReCaptchaEnterpriseProvider","initializeRecaptchaEnterprise","CustomProvider","_customProviderOptions","customToken","issuedAtTimeSeconds","issuedAtTime","throttleData","backoffCount","backoffMillis","calculateBackoffMillis","initializeAppCheck","getApp","getModularInstance","console","log","isInitialized","existingInstance","initialOptions","getOptions","_activate","newState","automaticDataCollectionEnabled","setTokenAutoRefreshEnabled","appCheckInstance","getTokenInternal","onTokenChanged","onNextOrObserver","onCompletion","nextFn","errorFn","bind","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","_registerComponent","Component","getProvider","setInstantiationMode","setInstanceCreatedCallback","_identifier","_appcheckService","registerVersion","version"],"sources":["../../src/state.ts","../../src/constants.ts","../../src/proactive-refresh.ts","../../src/errors.ts","../../src/util.ts","../../src/client.ts","../../src/indexeddb.ts","../../src/logger.ts","../../src/storage.ts","../../src/debug.ts","../../src/internal-api.ts","../../src/factory.ts","../../src/recaptcha.ts","../../src/providers.ts","../../src/api.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckProvider,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver\n} from './types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProvider;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  exchangeTokenPromise?: Promise<AppCheckTokenInternal>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  initialized: boolean;\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  initialized: false,\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n  DEBUG_STATE.initialized = false;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1beta';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nexport const EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD =\n  'exchangeRecaptchaEnterpriseToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n\n/**\n * One day in millis, for certain error code backoffs.\n */\nexport const ONE_DAY = 24 * 60 * 60 * 1000;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_INITIALIZED = 'already-initialized',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error',\n  THROTTLED = 'throttled'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_INITIALIZED]:\n    'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\n    'different options. To avoid this error, call initializeAppCheck() with the ' +\n    'same options as when it was originally called. This will return the ' +\n    'already initialized instance.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\n    'Call initializeAppCheck() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.',\n  [AppCheckError.THROTTLED]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_INITIALIZED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppCheckError.THROTTLED]: { time: string; httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getRecaptcha(\n  isEnterprise: boolean = false\n): GreCAPTCHA | undefined {\n  if (isEnterprise) {\n    return self.grecaptcha?.enterprise;\n  }\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport function getDurationString(durationInMillis: number): string {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor(\n    (totalSeconds - days * 3600 * 24 - hours * 3600) / 60\n  );\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n\n  let result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value: number): string {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  attestationToken: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaV3TokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeRecaptchaEnterpriseTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './types';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: e.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  ListenerType\n} from './types';\nimport { AppCheckTokenListener } from './public-types';\nimport { getState, setState } from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64, FirebaseError } from '@firebase/util';\nimport { logger } from './logger';\nimport { AppCheckService } from './factory';\nimport { AppCheckError } from './errors';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  appCheck: AppCheckService,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const state = getState(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If there is no token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n  let shouldCallListeners = false;\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      state.exchangeTokenPromise = exchangeToken(\n        getExchangeDebugTokenRequest(app, await getDebugToken()),\n        appCheck.platformLoggerProvider\n      ).then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n    const tokenFromDebugExchange: AppCheckTokenInternal =\n      await state.exchangeTokenPromise;\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, { ...state, token: tokenFromDebugExchange });\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider!.getToken().then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n    token = await state.exchangeTokenPromise;\n  } catch (e) {\n    if ((e as FirebaseError).code === `appCheck/${AppCheckError.THROTTLED}`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn((e as FirebaseError).message);\n    } else {\n      // `getToken()` should never throw, but logging error text to console will aid debugging.\n      logger.error(e);\n    }\n    // Always save error to be added to dummy token.\n    error = e as FirebaseError;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  appCheck: AppCheckService,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const { app } = appCheck;\n  const state = getState(app);\n  const tokenObserver: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  setState(app, {\n    ...state,\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  });\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => {\n        listener({ token: validToken.token });\n        initTokenRefresher(appCheck);\n      })\n      .catch(() => {\n        /* we don't care about exceptions thrown in listeners */\n      });\n  }\n\n  /**\n   * Wait for any cached token promise to resolve before starting the token\n   * refresher. The refresher checks to see if there is an existing token\n   * in state and calls the exchange endpoint if not. We should first let the\n   * IndexedDB check have a chance to populate state if it can.\n   *\n   * Listener call isn't needed here because cachedTokenPromise will call any\n   * listeners that exist when it resolves.\n   */\n\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise!.then(() => initTokenRefresher(appCheck));\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getState(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenObservers: newObservers\n  });\n}\n\n/**\n * Logic to create and start refresher as needed.\n */\nfunction initTokenRefresher(appCheck: AppCheckService): void {\n  const { app } = appCheck;\n  const state = getState(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  let refresher: Refresher | undefined = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    setState(app, { ...state, tokenRefresher: refresher });\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck: AppCheckService): Refresher {\n  const { app } = appCheck;\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(appCheck);\n      } else {\n        result = await getToken(appCheck, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nexport function notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheck } from './public-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { FirebaseAppCheckInternal, ListenerType } from './types';\nimport {\n  getToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { getState } from './state';\n\n/**\n * AppCheck Service class.\n */\nexport class AppCheckService implements AppCheck, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    public platformLoggerProvider: Provider<'platform-logger'>\n  ) {}\n  _delete(): Promise<void> {\n    const { tokenObservers } = getState(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): AppCheckService {\n  return new AppCheckService(app, platformLoggerProvider);\n}\n\nexport function internalFactory(\n  appCheck: AppCheckService\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh => getToken(appCheck, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(appCheck, ListenerType.INTERNAL, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nexport const RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js';\n\nexport function initializeV3(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nexport function initializeEnterprise(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n\n/**\n * Add listener to render the widget and resolve the promise when\n * the grecaptcha.ready() event fires.\n */\nfunction queueWidgetRender(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string,\n  initialized: Deferred<GreCAPTCHA>\n): void {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n\n/**\n * Add invisible div to page.\n */\nfunction makeDiv(app: FirebaseApp): string {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAV3Script(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHATopLevel | undefined;\n  }\n}\n\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport {\n  FirebaseError,\n  issuedAtTime,\n  calculateBackoffMillis\n} from '@firebase/util';\nimport {\n  exchangeToken,\n  getExchangeRecaptchaEnterpriseTokenRequest,\n  getExchangeRecaptchaV3TokenRequest\n} from './client';\nimport { ONE_DAY } from './constants';\nimport { AppCheckError, ERROR_FACTORY } from './errors';\nimport { CustomProviderOptions } from './public-types';\nimport {\n  getToken as getReCAPTCHAToken,\n  initializeV3 as initializeRecaptchaV3,\n  initializeEnterprise as initializeRecaptchaEnterprise\n} from './recaptcha';\nimport { AppCheckProvider, AppCheckTokenInternal, ThrottleData } from './types';\nimport { getDurationString } from './util';\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._platformLoggerProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaV3TokenRequest(this._app!, attestedClaimsToken),\n        this._platformLoggerProvider!\n      );\n    } catch (e) {\n      if ((e as FirebaseError).code === AppCheckError.FETCH_STATUS_ERROR) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initializeRecaptchaV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaEnterpriseProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaEnterpriseProvider instance.\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._platformLoggerProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaEnterpriseTokenRequest(\n          this._app!,\n          attestedClaimsToken\n        ),\n        this._platformLoggerProvider!\n      );\n    } catch (e) {\n      if ((e as FirebaseError).code === AppCheckError.FETCH_STATUS_ERROR) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initializeRecaptchaEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Custom provider class.\n * @public\n */\nexport class CustomProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof CustomProvider) {\n      return (\n        this._customProviderOptions.getToken.toString() ===\n        otherProvider._customProviderOptions.getToken.toString()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Set throttle data to block requests until after a certain time\n * depending on the failed request's status code.\n * @param httpStatus - Status code of failed request.\n * @param throttleData - `ThrottleData` object containing previous throttle\n * data state.\n * @returns Data about current throttle state and expiration time.\n */\nfunction setBackoff(\n  httpStatus: number,\n  throttleData: ThrottleData | null\n): ThrottleData {\n  /**\n   * Block retries for 1 day for the following error codes:\n   *\n   * 404: Likely malformed URL.\n   *\n   * 403:\n   * - Attestation failed\n   * - Wrong API key\n   * - Project deleted\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\n     * For all other error codes, the time when it is ok to retry again\n     * is based on exponential backoff.\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData: ThrottleData | null): void {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheck,\n  AppCheckOptions,\n  AppCheckTokenResult,\n  Unsubscribe,\n  PartialObserver\n} from './public-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { getState, setState, AppCheckState, getDebugState } from './state';\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { getModularInstance, ErrorFn, NextFn } from '@firebase/util';\nimport { AppCheckService } from './factory';\nimport { AppCheckProvider, ListenerType } from './types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid,\n  notifyTokenListeners\n} from './internal-api';\nimport { readTokenFromStorage } from './storage';\nimport { getDebugToken, initializeDebugMode, isDebugMode } from './debug';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'app-check': AppCheckService;\n  }\n}\n\nexport {\n  ReCaptchaV3Provider,\n  CustomProvider,\n  ReCaptchaEnterpriseProvider\n} from './providers';\n\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nexport function initializeAppCheck(\n  app: FirebaseApp = getApp(),\n  options: AppCheckOptions\n): AppCheck {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n      // Not using logger because I don't think we ever want this accidentally hidden.\n      console.log(\n        `App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`\n      )\n    );\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions() as unknown as AppCheckOptions;\n    if (\n      initialOptions.isTokenAutoRefreshEnabled ===\n        options.isTokenAutoRefreshEnabled &&\n      initialOptions.provider.isEqual(options.provider)\n    ) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AppCheckError.ALREADY_INITIALIZED, {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({ options });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getState(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, ListenerType.INTERNAL, () => {});\n  }\n\n  return appCheck;\n}\n\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(\n  app: FirebaseApp,\n  provider: AppCheckProvider,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n\n  const newState: AppCheckState = { ...state, activated: true };\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, { ...getState(app), token: cachedToken });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: cachedToken.token });\n    }\n    return cachedToken;\n  });\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  newState.provider.initialize(app);\n}\n\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nexport function setTokenAutoRefreshEnabled(\n  appCheckInstance: AppCheck,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const app = appCheckInstance.app;\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n/**\n * Get the current App Check token. Attaches to the most recent\n * in-flight request if one is present. Returns null if no token\n * is present and no token requests are in-flight.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nexport async function getToken(\n  appCheckInstance: AppCheck,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    appCheckInstance as AppCheckService,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param observer - An object with `next`, `error`, and `complete`\n * properties. `next` is called with an\n * {@link AppCheckTokenResult}\n * whenever the token changes. `error` is optional and is called if an\n * error is thrown by the listener (the `next` function). `complete`\n * is unused, as the token stream is unending.\n *\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param onNext - When the token changes, this function is called with aa\n * {@link AppCheckTokenResult}.\n * @param onError - Optional. Called if there is an error thrown by the\n * listener (the `onNext` function).\n * @param onCompletion - Currently unused, as the token stream is unending.\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    appCheckInstance as AppCheckService,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n","/**\n * Firebase App Check\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { _AppCheckComponentName } from './public-types';\nimport { factory, internalFactory } from './factory';\nimport { _AppCheckInternalComponentName } from './types';\nimport { name, version } from '../package.json';\n\n// Used by other Firebase packages.\nexport { _AppCheckInternalComponentName };\n\nexport * from './api';\nexport * from './public-types';\n\nconst APP_CHECK_NAME: _AppCheckComponentName = 'app-check';\nconst APP_CHECK_NAME_INTERNAL: _AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(): void {\n  // The public interface\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return factory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n       * other Firebase SDKs\n       */\n      .setInstanceCreatedCallback(\n        (container, _identifier, _appcheckService) => {\n          container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        const appCheck = container.getProvider('app-check').getImmediate();\n        return internalFactory(appCheck);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\n"]},"metadata":{},"sourceType":"module"}